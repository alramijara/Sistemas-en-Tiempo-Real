
fsm_hal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f40  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  080030d0  080030d0  000130d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003194  08003194  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  08003194  08003194  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003194  08003194  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003194  08003194  00013194  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003198  08003198  00013198  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  0800319c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000fa4  2000001c  080031b8  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000fc0  080031b8  00020fc0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c1d3  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000205a  00000000  00000000  0002c21f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a88  00000000  00000000  0002e280  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000980  00000000  00000000  0002ed08  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00025ff4  00000000  00000000  0002f688  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008ffc  00000000  00000000  0005567c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ea9d6  00000000  00000000  0005e678  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014904e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002880  00000000  00000000  001490cc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000001c 	.word	0x2000001c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080030b8 	.word	0x080030b8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000020 	.word	0x20000020
 80001cc:	080030b8 	.word	0x080030b8

080001d0 <__clear_cache>:
 80001d0:	4770      	bx	lr
 80001d2:	bf00      	nop

080001d4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80001d4:	b480      	push	{r7}
 80001d6:	b085      	sub	sp, #20
 80001d8:	af00      	add	r7, sp, #0
 80001da:	60f8      	str	r0, [r7, #12]
 80001dc:	60b9      	str	r1, [r7, #8]
 80001de:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80001e0:	68fb      	ldr	r3, [r7, #12]
 80001e2:	4a07      	ldr	r2, [pc, #28]	; (8000200 <vApplicationGetIdleTaskMemory+0x2c>)
 80001e4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80001e6:	68bb      	ldr	r3, [r7, #8]
 80001e8:	4a06      	ldr	r2, [pc, #24]	; (8000204 <vApplicationGetIdleTaskMemory+0x30>)
 80001ea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	2280      	movs	r2, #128	; 0x80
 80001f0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 80001f2:	bf00      	nop
 80001f4:	3714      	adds	r7, #20
 80001f6:	46bd      	mov	sp, r7
 80001f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fc:	4770      	bx	lr
 80001fe:	bf00      	nop
 8000200:	20000038 	.word	0x20000038
 8000204:	2000008c 	.word	0x2000008c

08000208 <apag.7944>:
		}

		#define MAX_STATES 3
		#define MAX_EVENTS 3
		typedef void (*transition)();
		void apag(){	//Accion de apagar el led
 8000208:	b580      	push	{r7, lr}
 800020a:	b082      	sub	sp, #8
 800020c:	af00      	add	r7, sp, #0
 800020e:	f8c7 c004 	str.w	ip, [r7, #4]
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET);
 8000212:	2200      	movs	r2, #0
 8000214:	2120      	movs	r1, #32
 8000216:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800021a:	f000 fe97 	bl	8000f4c <HAL_GPIO_WritePin>
			tsw=20000;	//Establece el tiempo limite en 20s
 800021e:	4b09      	ldr	r3, [pc, #36]	; (8000244 <apag.7944+0x3c>)
 8000220:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000224:	601a      	str	r2, [r3, #0]
			led_state=OFF;
 8000226:	4b08      	ldr	r3, [pc, #32]	; (8000248 <apag.7944+0x40>)
 8000228:	2200      	movs	r2, #0
 800022a:	701a      	strb	r2, [r3, #0]
			t_led=HAL_GetTick();	//Guarda el tiempo actual
 800022c:	f000 fbdc 	bl	80009e8 <HAL_GetTick>
 8000230:	4602      	mov	r2, r0
 8000232:	4b06      	ldr	r3, [pc, #24]	; (800024c <apag.7944+0x44>)
 8000234:	601a      	str	r2, [r3, #0]
			dim=0;
 8000236:	4b06      	ldr	r3, [pc, #24]	; (8000250 <apag.7944+0x48>)
 8000238:	2200      	movs	r2, #0
 800023a:	601a      	str	r2, [r3, #0]
		}
 800023c:	bf00      	nop
 800023e:	3708      	adds	r7, #8
 8000240:	46bd      	mov	sp, r7
 8000242:	bd80      	pop	{r7, pc}
 8000244:	20000000 	.word	0x20000000
 8000248:	20000fad 	.word	0x20000fad
 800024c:	2000028c 	.word	0x2000028c
 8000250:	20000290 	.word	0x20000290

08000254 <LedHandler>:
void LedHandler(void){
 8000254:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000256:	b09b      	sub	sp, #108	; 0x6c
 8000258:	af00      	add	r7, sp, #0
 800025a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800025e:	643b      	str	r3, [r7, #64]	; 0x40
 8000260:	463c      	mov	r4, r7
 8000262:	463d      	mov	r5, r7
 8000264:	4b5d      	ldr	r3, [pc, #372]	; (80003dc <LedHandler+0x188>)
 8000266:	4626      	mov	r6, r4
 8000268:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800026a:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 800026e:	60a5      	str	r5, [r4, #8]
 8000270:	4b5b      	ldr	r3, [pc, #364]	; (80003e0 <LedHandler+0x18c>)
 8000272:	60e3      	str	r3, [r4, #12]
 8000274:	f104 0310 	add.w	r3, r4, #16
 8000278:	4619      	mov	r1, r3
 800027a:	4620      	mov	r0, r4
 800027c:	f7ff ffa8 	bl	80001d0 <__clear_cache>
 8000280:	463b      	mov	r3, r7
 8000282:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8000286:	463d      	mov	r5, r7
 8000288:	4b54      	ldr	r3, [pc, #336]	; (80003dc <LedHandler+0x188>)
 800028a:	4626      	mov	r6, r4
 800028c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800028e:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 8000292:	60a5      	str	r5, [r4, #8]
 8000294:	4b53      	ldr	r3, [pc, #332]	; (80003e4 <LedHandler+0x190>)
 8000296:	60e3      	str	r3, [r4, #12]
 8000298:	f104 0310 	add.w	r3, r4, #16
 800029c:	4619      	mov	r1, r3
 800029e:	4620      	mov	r0, r4
 80002a0:	f7ff ff96 	bl	80001d0 <__clear_cache>
 80002a4:	463b      	mov	r3, r7
 80002a6:	f103 0420 	add.w	r4, r3, #32
 80002aa:	463d      	mov	r5, r7
 80002ac:	4b4b      	ldr	r3, [pc, #300]	; (80003dc <LedHandler+0x188>)
 80002ae:	4626      	mov	r6, r4
 80002b0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80002b2:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 80002b6:	60a5      	str	r5, [r4, #8]
 80002b8:	4b4b      	ldr	r3, [pc, #300]	; (80003e8 <LedHandler+0x194>)
 80002ba:	60e3      	str	r3, [r4, #12]
 80002bc:	f104 0310 	add.w	r3, r4, #16
 80002c0:	4619      	mov	r1, r3
 80002c2:	4620      	mov	r0, r4
 80002c4:	f7ff ff84 	bl	80001d0 <__clear_cache>
 80002c8:	463b      	mov	r3, r7
 80002ca:	f103 0410 	add.w	r4, r3, #16
 80002ce:	463d      	mov	r5, r7
 80002d0:	4b42      	ldr	r3, [pc, #264]	; (80003dc <LedHandler+0x188>)
 80002d2:	4626      	mov	r6, r4
 80002d4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80002d6:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 80002da:	60a5      	str	r5, [r4, #8]
 80002dc:	4b43      	ldr	r3, [pc, #268]	; (80003ec <LedHandler+0x198>)
 80002de:	60e3      	str	r3, [r4, #12]
 80002e0:	f104 0310 	add.w	r3, r4, #16
 80002e4:	4619      	mov	r1, r3
 80002e6:	4620      	mov	r0, r4
 80002e8:	f7ff ff72 	bl	80001d0 <__clear_cache>
		if (start==1){			//Cuando la funcion se ejecuta por primera vez:
 80002ec:	4b40      	ldr	r3, [pc, #256]	; (80003f0 <LedHandler+0x19c>)
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	2b01      	cmp	r3, #1
 80002f2:	d10b      	bne.n	800030c <LedHandler+0xb8>
			led_state=OFF;	//Se pone el estado en OFF
 80002f4:	4b3f      	ldr	r3, [pc, #252]	; (80003f4 <LedHandler+0x1a0>)
 80002f6:	2200      	movs	r2, #0
 80002f8:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET);	//Se apaga el led
 80002fa:	2200      	movs	r2, #0
 80002fc:	2120      	movs	r1, #32
 80002fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000302:	f000 fe23 	bl	8000f4c <HAL_GPIO_WritePin>
			start=0;			//Y se cambia la bandera para no volver a ejecutar esto
 8000306:	4b3a      	ldr	r3, [pc, #232]	; (80003f0 <LedHandler+0x19c>)
 8000308:	2200      	movs	r2, #0
 800030a:	601a      	str	r2, [r3, #0]
			t_led=HAL_GetTick();
			tsw=4000;
		}
		void error(){dimerizar(dim);}//Si no ha cambiado nada, revise si debe dimerizar el led

		transition state_table[MAX_STATES][MAX_EVENTS] = {
 800030c:	463b      	mov	r3, r7
 800030e:	3330      	adds	r3, #48	; 0x30
 8000310:	f043 0301 	orr.w	r3, r3, #1
 8000314:	647b      	str	r3, [r7, #68]	; 0x44
 8000316:	463b      	mov	r3, r7
 8000318:	3320      	adds	r3, #32
 800031a:	f043 0301 	orr.w	r3, r3, #1
 800031e:	64bb      	str	r3, [r7, #72]	; 0x48
 8000320:	463b      	mov	r3, r7
 8000322:	3310      	adds	r3, #16
 8000324:	f043 0301 	orr.w	r3, r3, #1
 8000328:	64fb      	str	r3, [r7, #76]	; 0x4c
 800032a:	463b      	mov	r3, r7
 800032c:	3320      	adds	r3, #32
 800032e:	f043 0301 	orr.w	r3, r3, #1
 8000332:	653b      	str	r3, [r7, #80]	; 0x50
 8000334:	463b      	mov	r3, r7
 8000336:	f043 0301 	orr.w	r3, r3, #1
 800033a:	657b      	str	r3, [r7, #84]	; 0x54
 800033c:	463b      	mov	r3, r7
 800033e:	3310      	adds	r3, #16
 8000340:	f043 0301 	orr.w	r3, r3, #1
 8000344:	65bb      	str	r3, [r7, #88]	; 0x58
 8000346:	463b      	mov	r3, r7
 8000348:	f043 0301 	orr.w	r3, r3, #1
 800034c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800034e:	463b      	mov	r3, r7
 8000350:	3330      	adds	r3, #48	; 0x30
 8000352:	f043 0301 	orr.w	r3, r3, #1
 8000356:	663b      	str	r3, [r7, #96]	; 0x60
 8000358:	463b      	mov	r3, r7
 800035a:	3310      	adds	r3, #16
 800035c:	f043 0301 	orr.w	r3, r3, #1
 8000360:	667b      	str	r3, [r7, #100]	; 0x64
				{dimer,brill,error}, //OFF
				{brill, apag, error},//DIM
				{apag, dimer, error}//BRIGHT
		};
				//tswm, tswp, NC
		if (event==0){	//Si se presiono el boton
 8000362:	4b25      	ldr	r3, [pc, #148]	; (80003f8 <LedHandler+0x1a4>)
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	2b00      	cmp	r3, #0
 8000368:	d118      	bne.n	800039c <LedHandler+0x148>
			event=1;	//Limpie la bandera del boton
 800036a:	4b23      	ldr	r3, [pc, #140]	; (80003f8 <LedHandler+0x1a4>)
 800036c:	2201      	movs	r2, #1
 800036e:	601a      	str	r2, [r3, #0]
			con=HAL_GetTick();	//Lea el tiempo actual
 8000370:	f000 fb3a 	bl	80009e8 <HAL_GetTick>
 8000374:	4602      	mov	r2, r0
 8000376:	4b21      	ldr	r3, [pc, #132]	; (80003fc <LedHandler+0x1a8>)
 8000378:	601a      	str	r2, [r3, #0]
			if(con<(t_led+tsw)){	//Si ha transcurrido menos de un tiempo limite entre
 800037a:	4b21      	ldr	r3, [pc, #132]	; (8000400 <LedHandler+0x1ac>)
 800037c:	681a      	ldr	r2, [r3, #0]
 800037e:	4b21      	ldr	r3, [pc, #132]	; (8000404 <LedHandler+0x1b0>)
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	441a      	add	r2, r3
 8000384:	4b1d      	ldr	r3, [pc, #116]	; (80003fc <LedHandler+0x1a8>)
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	429a      	cmp	r2, r3
 800038a:	d903      	bls.n	8000394 <LedHandler+0x140>
				  new_event=tswm;	//cada cambio de estado, presente el evento
 800038c:	4b1e      	ldr	r3, [pc, #120]	; (8000408 <LedHandler+0x1b4>)
 800038e:	2200      	movs	r2, #0
 8000390:	701a      	strb	r2, [r3, #0]
 8000392:	e006      	b.n	80003a2 <LedHandler+0x14e>
			  }
			else{
				 new_event=tswp;
 8000394:	4b1c      	ldr	r3, [pc, #112]	; (8000408 <LedHandler+0x1b4>)
 8000396:	2201      	movs	r2, #1
 8000398:	701a      	strb	r2, [r3, #0]
 800039a:	e002      	b.n	80003a2 <LedHandler+0x14e>
			 }
		}
		else{new_event=NC;}		//Nada cambio
 800039c:	4b1a      	ldr	r3, [pc, #104]	; (8000408 <LedHandler+0x1b4>)
 800039e:	2202      	movs	r2, #2
 80003a0:	701a      	strb	r2, [r3, #0]
		if ((new_event >= 0) && (new_event < MAX_EVENTS)	//El evento actual esta entre los eventos que se crearon
				&& (led_state >= 0) && (led_state < MAX_STATES)) {//El estado actual esta entre los eventos que se crearon
 80003a2:	4b19      	ldr	r3, [pc, #100]	; (8000408 <LedHandler+0x1b4>)
 80003a4:	781b      	ldrb	r3, [r3, #0]
		if ((new_event >= 0) && (new_event < MAX_EVENTS)	//El evento actual esta entre los eventos que se crearon
 80003a6:	2b02      	cmp	r3, #2
 80003a8:	d814      	bhi.n	80003d4 <LedHandler+0x180>
				&& (led_state >= 0) && (led_state < MAX_STATES)) {//El estado actual esta entre los eventos que se crearon
 80003aa:	4b12      	ldr	r3, [pc, #72]	; (80003f4 <LedHandler+0x1a0>)
 80003ac:	781b      	ldrb	r3, [r3, #0]
 80003ae:	2b02      	cmp	r3, #2
 80003b0:	d810      	bhi.n	80003d4 <LedHandler+0x180>
		/* call the transition function */
			state_table[led_state][new_event]();//Se ejecuta la tabla de estados usando el evento y estado actual
 80003b2:	4b10      	ldr	r3, [pc, #64]	; (80003f4 <LedHandler+0x1a0>)
 80003b4:	781b      	ldrb	r3, [r3, #0]
 80003b6:	461a      	mov	r2, r3
 80003b8:	4b13      	ldr	r3, [pc, #76]	; (8000408 <LedHandler+0x1b4>)
 80003ba:	781b      	ldrb	r3, [r3, #0]
 80003bc:	4619      	mov	r1, r3
 80003be:	4613      	mov	r3, r2
 80003c0:	005b      	lsls	r3, r3, #1
 80003c2:	4413      	add	r3, r2
 80003c4:	440b      	add	r3, r1
 80003c6:	009b      	lsls	r3, r3, #2
 80003c8:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80003cc:	4413      	add	r3, r2
 80003ce:	f853 3c24 	ldr.w	r3, [r3, #-36]
 80003d2:	4798      	blx	r3
		}
		else {
		/* invalid event/state - handle appropriately */
	}
}
 80003d4:	bf00      	nop
 80003d6:	376c      	adds	r7, #108	; 0x6c
 80003d8:	46bd      	mov	sp, r7
 80003da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003dc:	080030d0 	.word	0x080030d0
 80003e0:	08000209 	.word	0x08000209
 80003e4:	0800040d 	.word	0x0800040d
 80003e8:	0800044d 	.word	0x0800044d
 80003ec:	08000499 	.word	0x08000499
 80003f0:	20000004 	.word	0x20000004
 80003f4:	20000fad 	.word	0x20000fad
 80003f8:	20000008 	.word	0x20000008
 80003fc:	20000294 	.word	0x20000294
 8000400:	2000028c 	.word	0x2000028c
 8000404:	20000000 	.word	0x20000000
 8000408:	20000fac 	.word	0x20000fac

0800040c <dimer.7946>:
		void dimer(){	//Accion de dimerizar el led
 800040c:	b580      	push	{r7, lr}
 800040e:	b082      	sub	sp, #8
 8000410:	af00      	add	r7, sp, #0
 8000412:	f8c7 c004 	str.w	ip, [r7, #4]
			dim=1;
 8000416:	4b09      	ldr	r3, [pc, #36]	; (800043c <dimer.7946+0x30>)
 8000418:	2201      	movs	r2, #1
 800041a:	601a      	str	r2, [r3, #0]
			led_state=DIM;
 800041c:	4b08      	ldr	r3, [pc, #32]	; (8000440 <dimer.7946+0x34>)
 800041e:	2201      	movs	r2, #1
 8000420:	701a      	strb	r2, [r3, #0]
			t_led=HAL_GetTick();	//Guarda el tiempo actual
 8000422:	f000 fae1 	bl	80009e8 <HAL_GetTick>
 8000426:	4602      	mov	r2, r0
 8000428:	4b06      	ldr	r3, [pc, #24]	; (8000444 <dimer.7946+0x38>)
 800042a:	601a      	str	r2, [r3, #0]
			tsw=4000;
 800042c:	4b06      	ldr	r3, [pc, #24]	; (8000448 <dimer.7946+0x3c>)
 800042e:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000432:	601a      	str	r2, [r3, #0]
		}
 8000434:	bf00      	nop
 8000436:	3708      	adds	r7, #8
 8000438:	46bd      	mov	sp, r7
 800043a:	bd80      	pop	{r7, pc}
 800043c:	20000290 	.word	0x20000290
 8000440:	20000fad 	.word	0x20000fad
 8000444:	2000028c 	.word	0x2000028c
 8000448:	20000000 	.word	0x20000000

0800044c <brill.7948>:
		void brill(){//Accion de encender el led
 800044c:	b580      	push	{r7, lr}
 800044e:	b082      	sub	sp, #8
 8000450:	af00      	add	r7, sp, #0
 8000452:	f8c7 c004 	str.w	ip, [r7, #4]
			dim=0;
 8000456:	4b0c      	ldr	r3, [pc, #48]	; (8000488 <brill.7948+0x3c>)
 8000458:	2200      	movs	r2, #0
 800045a:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET);//Se enciende el led
 800045c:	2201      	movs	r2, #1
 800045e:	2120      	movs	r1, #32
 8000460:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000464:	f000 fd72 	bl	8000f4c <HAL_GPIO_WritePin>
			led_state=BRIGHT;		//Se pasa al estado BRIGHT
 8000468:	4b08      	ldr	r3, [pc, #32]	; (800048c <brill.7948+0x40>)
 800046a:	2202      	movs	r2, #2
 800046c:	701a      	strb	r2, [r3, #0]
			t_led=HAL_GetTick();
 800046e:	f000 fabb 	bl	80009e8 <HAL_GetTick>
 8000472:	4602      	mov	r2, r0
 8000474:	4b06      	ldr	r3, [pc, #24]	; (8000490 <brill.7948+0x44>)
 8000476:	601a      	str	r2, [r3, #0]
			tsw=4000;
 8000478:	4b06      	ldr	r3, [pc, #24]	; (8000494 <brill.7948+0x48>)
 800047a:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800047e:	601a      	str	r2, [r3, #0]
		}
 8000480:	bf00      	nop
 8000482:	3708      	adds	r7, #8
 8000484:	46bd      	mov	sp, r7
 8000486:	bd80      	pop	{r7, pc}
 8000488:	20000290 	.word	0x20000290
 800048c:	20000fad 	.word	0x20000fad
 8000490:	2000028c 	.word	0x2000028c
 8000494:	20000000 	.word	0x20000000

08000498 <error.7950>:
		void error(){dimerizar(dim);}//Si no ha cambiado nada, revise si debe dimerizar el led
 8000498:	b580      	push	{r7, lr}
 800049a:	b082      	sub	sp, #8
 800049c:	af00      	add	r7, sp, #0
 800049e:	f8c7 c004 	str.w	ip, [r7, #4]
 80004a2:	4b04      	ldr	r3, [pc, #16]	; (80004b4 <error.7950+0x1c>)
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	4618      	mov	r0, r3
 80004a8:	f000 f85e 	bl	8000568 <dimerizar>
 80004ac:	bf00      	nop
 80004ae:	3708      	adds	r7, #8
 80004b0:	46bd      	mov	sp, r7
 80004b2:	bd80      	pop	{r7, pc}
 80004b4:	20000290 	.word	0x20000290

080004b8 <BotonHandler>:

enum states2 {RELEASED,WAIT,DETECT} boton_state;	//Estados controlador boton
uint32_t volatile antire=0;			//Contador que indica cuando se cumplio el antirrebote
void BotonHandler(void){
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
	if (start==1){			//Cuando la funcion se ejecuta por primera vez:
 80004bc:	4b24      	ldr	r3, [pc, #144]	; (8000550 <BotonHandler+0x98>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	2b01      	cmp	r3, #1
 80004c2:	d102      	bne.n	80004ca <BotonHandler+0x12>
		boton_state=WAIT;	//Se pone el estado en OFF
 80004c4:	4b23      	ldr	r3, [pc, #140]	; (8000554 <BotonHandler+0x9c>)
 80004c6:	2201      	movs	r2, #1
 80004c8:	701a      	strb	r2, [r3, #0]
	}

	p=HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13);	//Se lee el estado del boton
 80004ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004ce:	4822      	ldr	r0, [pc, #136]	; (8000558 <BotonHandler+0xa0>)
 80004d0:	f000 fd24 	bl	8000f1c <HAL_GPIO_ReadPin>
 80004d4:	4603      	mov	r3, r0
 80004d6:	461a      	mov	r2, r3
 80004d8:	4b20      	ldr	r3, [pc, #128]	; (800055c <BotonHandler+0xa4>)
 80004da:	601a      	str	r2, [r3, #0]


	switch(boton_state){	//Cambio de estados boton
 80004dc:	4b1d      	ldr	r3, [pc, #116]	; (8000554 <BotonHandler+0x9c>)
 80004de:	781b      	ldrb	r3, [r3, #0]
 80004e0:	2b01      	cmp	r3, #1
 80004e2:	d028      	beq.n	8000536 <BotonHandler+0x7e>
 80004e4:	2b02      	cmp	r3, #2
 80004e6:	d002      	beq.n	80004ee <BotonHandler+0x36>
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d01a      	beq.n	8000522 <BotonHandler+0x6a>
				break;
			}
			break;
		default:

			break;
 80004ec:	e02e      	b.n	800054c <BotonHandler+0x94>
			switch (p){		//Si el boton esta presionado
 80004ee:	4b1b      	ldr	r3, [pc, #108]	; (800055c <BotonHandler+0xa4>)
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d002      	beq.n	80004fc <BotonHandler+0x44>
 80004f6:	2b01      	cmp	r3, #1
 80004f8:	d006      	beq.n	8000508 <BotonHandler+0x50>
			break;
 80004fa:	e027      	b.n	800054c <BotonHandler+0x94>
				antire+=1;	//Aumente el contador en 1
 80004fc:	4b18      	ldr	r3, [pc, #96]	; (8000560 <BotonHandler+0xa8>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	3301      	adds	r3, #1
 8000502:	4a17      	ldr	r2, [pc, #92]	; (8000560 <BotonHandler+0xa8>)
 8000504:	6013      	str	r3, [r2, #0]
				break;
 8000506:	e00b      	b.n	8000520 <BotonHandler+0x68>
				if (antire>50){//Si el boton paso mas de 50 ms presionado (no es un rebote)
 8000508:	4b15      	ldr	r3, [pc, #84]	; (8000560 <BotonHandler+0xa8>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	2b32      	cmp	r3, #50	; 0x32
 800050e:	d903      	bls.n	8000518 <BotonHandler+0x60>
					boton_state=RELEASED;	//pase al estado liberado
 8000510:	4b10      	ldr	r3, [pc, #64]	; (8000554 <BotonHandler+0x9c>)
 8000512:	2200      	movs	r2, #0
 8000514:	701a      	strb	r2, [r3, #0]
				break;
 8000516:	e002      	b.n	800051e <BotonHandler+0x66>
				}else{boton_state=WAIT;}	//Si no pase al estado de espera
 8000518:	4b0e      	ldr	r3, [pc, #56]	; (8000554 <BotonHandler+0x9c>)
 800051a:	2201      	movs	r2, #1
 800051c:	701a      	strb	r2, [r3, #0]
				break;
 800051e:	bf00      	nop
			break;
 8000520:	e014      	b.n	800054c <BotonHandler+0x94>
			event=0;	//Se envia el evento al controlador del led
 8000522:	4b10      	ldr	r3, [pc, #64]	; (8000564 <BotonHandler+0xac>)
 8000524:	2200      	movs	r2, #0
 8000526:	601a      	str	r2, [r3, #0]
			antire=0;	//Se reinicia la variable del antirrebote
 8000528:	4b0d      	ldr	r3, [pc, #52]	; (8000560 <BotonHandler+0xa8>)
 800052a:	2200      	movs	r2, #0
 800052c:	601a      	str	r2, [r3, #0]
			boton_state=WAIT;//Se pasa al estado de espera
 800052e:	4b09      	ldr	r3, [pc, #36]	; (8000554 <BotonHandler+0x9c>)
 8000530:	2201      	movs	r2, #1
 8000532:	701a      	strb	r2, [r3, #0]
			break;
 8000534:	e00a      	b.n	800054c <BotonHandler+0x94>
			switch (p){
 8000536:	4b09      	ldr	r3, [pc, #36]	; (800055c <BotonHandler+0xa4>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	2b00      	cmp	r3, #0
 800053c:	d001      	beq.n	8000542 <BotonHandler+0x8a>
 800053e:	2b01      	cmp	r3, #1
				break;
 8000540:	e003      	b.n	800054a <BotonHandler+0x92>
				boton_state=DETECT;
 8000542:	4b04      	ldr	r3, [pc, #16]	; (8000554 <BotonHandler+0x9c>)
 8000544:	2202      	movs	r2, #2
 8000546:	701a      	strb	r2, [r3, #0]
				break;
 8000548:	bf00      	nop
			break;
 800054a:	bf00      	nop

	}
}
 800054c:	bf00      	nop
 800054e:	bd80      	pop	{r7, pc}
 8000550:	20000004 	.word	0x20000004
 8000554:	20000fa4 	.word	0x20000fa4
 8000558:	48000800 	.word	0x48000800
 800055c:	20000fa8 	.word	0x20000fa8
 8000560:	20000298 	.word	0x20000298
 8000564:	20000008 	.word	0x20000008

08000568 <dimerizar>:
void dimerizar(int dim){
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
	if(dim==1){//Si esta en estado dimerizado
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	2b01      	cmp	r3, #1
 8000574:	d104      	bne.n	8000580 <dimerizar+0x18>
		 HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_5);//Encienda y apague el led
 8000576:	2120      	movs	r1, #32
 8000578:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800057c:	f000 fcfe 	bl	8000f7c <HAL_GPIO_TogglePin>
	}

}
 8000580:	bf00      	nop
 8000582:	3708      	adds	r7, #8
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}

08000588 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000588:	b5b0      	push	{r4, r5, r7, lr}
 800058a:	b096      	sub	sp, #88	; 0x58
 800058c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800058e:	f000 f9c6 	bl	800091e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000592:	f000 f85f 	bl	8000654 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000596:	f000 f8a3 	bl	80006e0 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */
  marca=HAL_GetTick();
 800059a:	f000 fa25 	bl	80009e8 <HAL_GetTick>
 800059e:	4602      	mov	r2, r0
 80005a0:	4b25      	ldr	r3, [pc, #148]	; (8000638 <main+0xb0>)
 80005a2:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80005a4:	4b25      	ldr	r3, [pc, #148]	; (800063c <main+0xb4>)
 80005a6:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80005aa:	461d      	mov	r5, r3
 80005ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005b0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005b4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005b8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80005bc:	2100      	movs	r1, #0
 80005be:	4618      	mov	r0, r3
 80005c0:	f001 fb2b 	bl	8001c1a <osThreadCreate>
 80005c4:	4602      	mov	r2, r0
 80005c6:	4b1e      	ldr	r3, [pc, #120]	; (8000640 <main+0xb8>)
 80005c8:	601a      	str	r2, [r3, #0]

  /* definition and creation of Led */
  osThreadDef(Led, StartLed, osPriorityIdle, 0, 128);
 80005ca:	4b1e      	ldr	r3, [pc, #120]	; (8000644 <main+0xbc>)
 80005cc:	f107 0420 	add.w	r4, r7, #32
 80005d0:	461d      	mov	r5, r3
 80005d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005d6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005da:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LedHandle = osThreadCreate(osThread(Led), NULL);
 80005de:	f107 0320 	add.w	r3, r7, #32
 80005e2:	2100      	movs	r1, #0
 80005e4:	4618      	mov	r0, r3
 80005e6:	f001 fb18 	bl	8001c1a <osThreadCreate>
 80005ea:	4602      	mov	r2, r0
 80005ec:	4b16      	ldr	r3, [pc, #88]	; (8000648 <main+0xc0>)
 80005ee:	601a      	str	r2, [r3, #0]

  /* definition and creation of Boton */
  osThreadDef(Boton, StartBoton, osPriorityIdle, 0, 128);
 80005f0:	4b16      	ldr	r3, [pc, #88]	; (800064c <main+0xc4>)
 80005f2:	1d3c      	adds	r4, r7, #4
 80005f4:	461d      	mov	r5, r3
 80005f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005fa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005fe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  BotonHandle = osThreadCreate(osThread(Boton), NULL);
 8000602:	1d3b      	adds	r3, r7, #4
 8000604:	2100      	movs	r1, #0
 8000606:	4618      	mov	r0, r3
 8000608:	f001 fb07 	bl	8001c1a <osThreadCreate>
 800060c:	4602      	mov	r2, r0
 800060e:	4b10      	ldr	r3, [pc, #64]	; (8000650 <main+0xc8>)
 8000610:	601a      	str	r2, [r3, #0]
  /* Set thread 2 in suspend state */
  //osThreadSuspend(LedHandle);
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000612:	f001 fafb 	bl	8001c0c <osKernelStart>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	if (HAL_GetTick()>marca){//Si ha pasado un milisegundo desde la ultima ejecucion
 8000616:	f000 f9e7 	bl	80009e8 <HAL_GetTick>
 800061a:	4602      	mov	r2, r0
 800061c:	4b06      	ldr	r3, [pc, #24]	; (8000638 <main+0xb0>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	429a      	cmp	r2, r3
 8000622:	d9f8      	bls.n	8000616 <main+0x8e>
	  BotonHandler();
 8000624:	f7ff ff48 	bl	80004b8 <BotonHandler>
	  LedHandler();
 8000628:	f7ff fe14 	bl	8000254 <LedHandler>
	  marca=HAL_GetTick();  //Almacene el tiempo actual
 800062c:	f000 f9dc 	bl	80009e8 <HAL_GetTick>
 8000630:	4602      	mov	r2, r0
 8000632:	4b01      	ldr	r3, [pc, #4]	; (8000638 <main+0xb0>)
 8000634:	601a      	str	r2, [r3, #0]
	if (HAL_GetTick()>marca){//Si ha pasado un milisegundo desde la ultima ejecucion
 8000636:	e7ee      	b.n	8000616 <main+0x8e>
 8000638:	2000029c 	.word	0x2000029c
 800063c:	080030ec 	.word	0x080030ec
 8000640:	20000fb4 	.word	0x20000fb4
 8000644:	0800310c 	.word	0x0800310c
 8000648:	20000fb0 	.word	0x20000fb0
 800064c:	08003130 	.word	0x08003130
 8000650:	20000fb8 	.word	0x20000fb8

08000654 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b096      	sub	sp, #88	; 0x58
 8000658:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065a:	f107 0314 	add.w	r3, r7, #20
 800065e:	2244      	movs	r2, #68	; 0x44
 8000660:	2100      	movs	r1, #0
 8000662:	4618      	mov	r0, r3
 8000664:	f002 fd20 	bl	80030a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000668:	463b      	mov	r3, r7
 800066a:	2200      	movs	r2, #0
 800066c:	601a      	str	r2, [r3, #0]
 800066e:	605a      	str	r2, [r3, #4]
 8000670:	609a      	str	r2, [r3, #8]
 8000672:	60da      	str	r2, [r3, #12]
 8000674:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000676:	2310      	movs	r3, #16
 8000678:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800067a:	2301      	movs	r3, #1
 800067c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800067e:	2300      	movs	r3, #0
 8000680:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000682:	2360      	movs	r3, #96	; 0x60
 8000684:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000686:	2300      	movs	r3, #0
 8000688:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800068a:	f107 0314 	add.w	r3, r7, #20
 800068e:	4618      	mov	r0, r3
 8000690:	f000 fcf2 	bl	8001078 <HAL_RCC_OscConfig>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <SystemClock_Config+0x4a>
  {
    Error_Handler();
 800069a:	f000 f889 	bl	80007b0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800069e:	230f      	movs	r3, #15
 80006a0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80006a2:	2300      	movs	r3, #0
 80006a4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a6:	2300      	movs	r3, #0
 80006a8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006aa:	2300      	movs	r3, #0
 80006ac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ae:	2300      	movs	r3, #0
 80006b0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006b2:	463b      	mov	r3, r7
 80006b4:	2100      	movs	r1, #0
 80006b6:	4618      	mov	r0, r3
 80006b8:	f001 f8c4 	bl	8001844 <HAL_RCC_ClockConfig>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80006c2:	f000 f875 	bl	80007b0 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006c6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006ca:	f000 fc7f 	bl	8000fcc <HAL_PWREx_ControlVoltageScaling>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80006d4:	f000 f86c 	bl	80007b0 <Error_Handler>
  }
}
 80006d8:	bf00      	nop
 80006da:	3758      	adds	r7, #88	; 0x58
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}

080006e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b088      	sub	sp, #32
 80006e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e6:	f107 030c 	add.w	r3, r7, #12
 80006ea:	2200      	movs	r2, #0
 80006ec:	601a      	str	r2, [r3, #0]
 80006ee:	605a      	str	r2, [r3, #4]
 80006f0:	609a      	str	r2, [r3, #8]
 80006f2:	60da      	str	r2, [r3, #12]
 80006f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006f6:	4b1f      	ldr	r3, [pc, #124]	; (8000774 <MX_GPIO_Init+0x94>)
 80006f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006fa:	4a1e      	ldr	r2, [pc, #120]	; (8000774 <MX_GPIO_Init+0x94>)
 80006fc:	f043 0304 	orr.w	r3, r3, #4
 8000700:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000702:	4b1c      	ldr	r3, [pc, #112]	; (8000774 <MX_GPIO_Init+0x94>)
 8000704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000706:	f003 0304 	and.w	r3, r3, #4
 800070a:	60bb      	str	r3, [r7, #8]
 800070c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800070e:	4b19      	ldr	r3, [pc, #100]	; (8000774 <MX_GPIO_Init+0x94>)
 8000710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000712:	4a18      	ldr	r2, [pc, #96]	; (8000774 <MX_GPIO_Init+0x94>)
 8000714:	f043 0301 	orr.w	r3, r3, #1
 8000718:	64d3      	str	r3, [r2, #76]	; 0x4c
 800071a:	4b16      	ldr	r3, [pc, #88]	; (8000774 <MX_GPIO_Init+0x94>)
 800071c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800071e:	f003 0301 	and.w	r3, r3, #1
 8000722:	607b      	str	r3, [r7, #4]
 8000724:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000726:	2200      	movs	r2, #0
 8000728:	2120      	movs	r1, #32
 800072a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800072e:	f000 fc0d 	bl	8000f4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000732:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000736:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000738:	2300      	movs	r3, #0
 800073a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073c:	2300      	movs	r3, #0
 800073e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000740:	f107 030c 	add.w	r3, r7, #12
 8000744:	4619      	mov	r1, r3
 8000746:	480c      	ldr	r0, [pc, #48]	; (8000778 <MX_GPIO_Init+0x98>)
 8000748:	f000 fa40 	bl	8000bcc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800074c:	2320      	movs	r3, #32
 800074e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000750:	2301      	movs	r3, #1
 8000752:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000754:	2300      	movs	r3, #0
 8000756:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000758:	2300      	movs	r3, #0
 800075a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800075c:	f107 030c 	add.w	r3, r7, #12
 8000760:	4619      	mov	r1, r3
 8000762:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000766:	f000 fa31 	bl	8000bcc <HAL_GPIO_Init>

}
 800076a:	bf00      	nop
 800076c:	3720      	adds	r7, #32
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	40021000 	.word	0x40021000
 8000778:	48000800 	.word	0x48000800

0800077c <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000784:	2001      	movs	r0, #1
 8000786:	f001 fa94 	bl	8001cb2 <osDelay>
 800078a:	e7fb      	b.n	8000784 <StartDefaultTask+0x8>

0800078c <StartLed>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLed */
void StartLed(void const * argument)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b084      	sub	sp, #16
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLed */
	  uint32_t count = 0;
 8000794:	2300      	movs	r3, #0
 8000796:	60fb      	str	r3, [r7, #12]
	    //count = osKernelSysTick() + 10;


	    //while (count > osKernelSysTick())
	    //{
	    	 LedHandler();
 8000798:	f7ff fd5c 	bl	8000254 <LedHandler>
 800079c:	e7fc      	b.n	8000798 <StartLed+0xc>

0800079e <StartBoton>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBoton */
void StartBoton(void const * argument)
{
 800079e:	b580      	push	{r7, lr}
 80007a0:	b084      	sub	sp, #16
 80007a2:	af00      	add	r7, sp, #0
 80007a4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBoton */
  /* Infinite loop */
	  uint32_t count = 0;
 80007a6:	2300      	movs	r3, #0
 80007a8:	60fb      	str	r3, [r7, #12]
	    //count = osKernelSysTick() + 10;


	    //while (count > osKernelSysTick())
	    //{
	    	BotonHandler();
 80007aa:	f7ff fe85 	bl	80004b8 <BotonHandler>
 80007ae:	e7fc      	b.n	80007aa <StartBoton+0xc>

080007b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80007b4:	bf00      	nop
 80007b6:	46bd      	mov	sp, r7
 80007b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007bc:	4770      	bx	lr
	...

080007c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007c6:	4b11      	ldr	r3, [pc, #68]	; (800080c <HAL_MspInit+0x4c>)
 80007c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007ca:	4a10      	ldr	r2, [pc, #64]	; (800080c <HAL_MspInit+0x4c>)
 80007cc:	f043 0301 	orr.w	r3, r3, #1
 80007d0:	6613      	str	r3, [r2, #96]	; 0x60
 80007d2:	4b0e      	ldr	r3, [pc, #56]	; (800080c <HAL_MspInit+0x4c>)
 80007d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007d6:	f003 0301 	and.w	r3, r3, #1
 80007da:	607b      	str	r3, [r7, #4]
 80007dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007de:	4b0b      	ldr	r3, [pc, #44]	; (800080c <HAL_MspInit+0x4c>)
 80007e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007e2:	4a0a      	ldr	r2, [pc, #40]	; (800080c <HAL_MspInit+0x4c>)
 80007e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007e8:	6593      	str	r3, [r2, #88]	; 0x58
 80007ea:	4b08      	ldr	r3, [pc, #32]	; (800080c <HAL_MspInit+0x4c>)
 80007ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007f2:	603b      	str	r3, [r7, #0]
 80007f4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80007f6:	2200      	movs	r2, #0
 80007f8:	210f      	movs	r1, #15
 80007fa:	f06f 0001 	mvn.w	r0, #1
 80007fe:	f000 f9bc 	bl	8000b7a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000802:	bf00      	nop
 8000804:	3708      	adds	r7, #8
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	40021000 	.word	0x40021000

08000810 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000814:	bf00      	nop
 8000816:	46bd      	mov	sp, r7
 8000818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081c:	4770      	bx	lr

0800081e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800081e:	b480      	push	{r7}
 8000820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000822:	e7fe      	b.n	8000822 <HardFault_Handler+0x4>

08000824 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000828:	e7fe      	b.n	8000828 <MemManage_Handler+0x4>

0800082a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800082a:	b480      	push	{r7}
 800082c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800082e:	e7fe      	b.n	800082e <BusFault_Handler+0x4>

08000830 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000834:	e7fe      	b.n	8000834 <UsageFault_Handler+0x4>

08000836 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000836:	b480      	push	{r7}
 8000838:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800083a:	bf00      	nop
 800083c:	46bd      	mov	sp, r7
 800083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000842:	4770      	bx	lr

08000844 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000848:	f000 f8bc 	bl	80009c4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800084c:	f001 ffa8 	bl	80027a0 <xTaskGetSchedulerState>
 8000850:	4603      	mov	r3, r0
 8000852:	2b01      	cmp	r3, #1
 8000854:	d001      	beq.n	800085a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000856:	f002 f9df 	bl	8002c18 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800085a:	bf00      	nop
 800085c:	bd80      	pop	{r7, pc}
	...

08000860 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000864:	4b17      	ldr	r3, [pc, #92]	; (80008c4 <SystemInit+0x64>)
 8000866:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800086a:	4a16      	ldr	r2, [pc, #88]	; (80008c4 <SystemInit+0x64>)
 800086c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000870:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000874:	4b14      	ldr	r3, [pc, #80]	; (80008c8 <SystemInit+0x68>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4a13      	ldr	r2, [pc, #76]	; (80008c8 <SystemInit+0x68>)
 800087a:	f043 0301 	orr.w	r3, r3, #1
 800087e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000880:	4b11      	ldr	r3, [pc, #68]	; (80008c8 <SystemInit+0x68>)
 8000882:	2200      	movs	r2, #0
 8000884:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000886:	4b10      	ldr	r3, [pc, #64]	; (80008c8 <SystemInit+0x68>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	4a0f      	ldr	r2, [pc, #60]	; (80008c8 <SystemInit+0x68>)
 800088c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000890:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000894:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000896:	4b0c      	ldr	r3, [pc, #48]	; (80008c8 <SystemInit+0x68>)
 8000898:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800089c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800089e:	4b0a      	ldr	r3, [pc, #40]	; (80008c8 <SystemInit+0x68>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	4a09      	ldr	r2, [pc, #36]	; (80008c8 <SystemInit+0x68>)
 80008a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80008a8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80008aa:	4b07      	ldr	r3, [pc, #28]	; (80008c8 <SystemInit+0x68>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80008b0:	4b04      	ldr	r3, [pc, #16]	; (80008c4 <SystemInit+0x64>)
 80008b2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80008b6:	609a      	str	r2, [r3, #8]
#endif
}
 80008b8:	bf00      	nop
 80008ba:	46bd      	mov	sp, r7
 80008bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c0:	4770      	bx	lr
 80008c2:	bf00      	nop
 80008c4:	e000ed00 	.word	0xe000ed00
 80008c8:	40021000 	.word	0x40021000

080008cc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80008cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000904 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80008d0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80008d2:	e003      	b.n	80008dc <LoopCopyDataInit>

080008d4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80008d4:	4b0c      	ldr	r3, [pc, #48]	; (8000908 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80008d6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80008d8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80008da:	3104      	adds	r1, #4

080008dc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80008dc:	480b      	ldr	r0, [pc, #44]	; (800090c <LoopForever+0xa>)
	ldr	r3, =_edata
 80008de:	4b0c      	ldr	r3, [pc, #48]	; (8000910 <LoopForever+0xe>)
	adds	r2, r0, r1
 80008e0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80008e2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80008e4:	d3f6      	bcc.n	80008d4 <CopyDataInit>
	ldr	r2, =_sbss
 80008e6:	4a0b      	ldr	r2, [pc, #44]	; (8000914 <LoopForever+0x12>)
	b	LoopFillZerobss
 80008e8:	e002      	b.n	80008f0 <LoopFillZerobss>

080008ea <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80008ea:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80008ec:	f842 3b04 	str.w	r3, [r2], #4

080008f0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80008f0:	4b09      	ldr	r3, [pc, #36]	; (8000918 <LoopForever+0x16>)
	cmp	r2, r3
 80008f2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80008f4:	d3f9      	bcc.n	80008ea <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80008f6:	f7ff ffb3 	bl	8000860 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008fa:	f002 fbb1 	bl	8003060 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80008fe:	f7ff fe43 	bl	8000588 <main>

08000902 <LoopForever>:

LoopForever:
    b LoopForever
 8000902:	e7fe      	b.n	8000902 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000904:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000908:	0800319c 	.word	0x0800319c
	ldr	r0, =_sdata
 800090c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000910:	2000001c 	.word	0x2000001c
	ldr	r2, =_sbss
 8000914:	2000001c 	.word	0x2000001c
	ldr	r3, = _ebss
 8000918:	20000fc0 	.word	0x20000fc0

0800091c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800091c:	e7fe      	b.n	800091c <ADC1_2_IRQHandler>

0800091e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800091e:	b580      	push	{r7, lr}
 8000920:	b082      	sub	sp, #8
 8000922:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000924:	2300      	movs	r3, #0
 8000926:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000928:	2003      	movs	r0, #3
 800092a:	f000 f91b 	bl	8000b64 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800092e:	200f      	movs	r0, #15
 8000930:	f000 f80e 	bl	8000950 <HAL_InitTick>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d002      	beq.n	8000940 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800093a:	2301      	movs	r3, #1
 800093c:	71fb      	strb	r3, [r7, #7]
 800093e:	e001      	b.n	8000944 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000940:	f7ff ff3e 	bl	80007c0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000944:	79fb      	ldrb	r3, [r7, #7]
}
 8000946:	4618      	mov	r0, r3
 8000948:	3708      	adds	r7, #8
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
	...

08000950 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b084      	sub	sp, #16
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000958:	2300      	movs	r3, #0
 800095a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800095c:	4b16      	ldr	r3, [pc, #88]	; (80009b8 <HAL_InitTick+0x68>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	2b00      	cmp	r3, #0
 8000962:	d022      	beq.n	80009aa <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000964:	4b15      	ldr	r3, [pc, #84]	; (80009bc <HAL_InitTick+0x6c>)
 8000966:	681a      	ldr	r2, [r3, #0]
 8000968:	4b13      	ldr	r3, [pc, #76]	; (80009b8 <HAL_InitTick+0x68>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000970:	fbb1 f3f3 	udiv	r3, r1, r3
 8000974:	fbb2 f3f3 	udiv	r3, r2, r3
 8000978:	4618      	mov	r0, r3
 800097a:	f000 f91a 	bl	8000bb2 <HAL_SYSTICK_Config>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d10f      	bne.n	80009a4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	2b0f      	cmp	r3, #15
 8000988:	d809      	bhi.n	800099e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800098a:	2200      	movs	r2, #0
 800098c:	6879      	ldr	r1, [r7, #4]
 800098e:	f04f 30ff 	mov.w	r0, #4294967295
 8000992:	f000 f8f2 	bl	8000b7a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000996:	4a0a      	ldr	r2, [pc, #40]	; (80009c0 <HAL_InitTick+0x70>)
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	6013      	str	r3, [r2, #0]
 800099c:	e007      	b.n	80009ae <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800099e:	2301      	movs	r3, #1
 80009a0:	73fb      	strb	r3, [r7, #15]
 80009a2:	e004      	b.n	80009ae <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80009a4:	2301      	movs	r3, #1
 80009a6:	73fb      	strb	r3, [r7, #15]
 80009a8:	e001      	b.n	80009ae <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80009aa:	2301      	movs	r3, #1
 80009ac:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80009ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80009b0:	4618      	mov	r0, r3
 80009b2:	3710      	adds	r7, #16
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	20000014 	.word	0x20000014
 80009bc:	2000000c 	.word	0x2000000c
 80009c0:	20000010 	.word	0x20000010

080009c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009c8:	4b05      	ldr	r3, [pc, #20]	; (80009e0 <HAL_IncTick+0x1c>)
 80009ca:	681a      	ldr	r2, [r3, #0]
 80009cc:	4b05      	ldr	r3, [pc, #20]	; (80009e4 <HAL_IncTick+0x20>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	4413      	add	r3, r2
 80009d2:	4a03      	ldr	r2, [pc, #12]	; (80009e0 <HAL_IncTick+0x1c>)
 80009d4:	6013      	str	r3, [r2, #0]
}
 80009d6:	bf00      	nop
 80009d8:	46bd      	mov	sp, r7
 80009da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009de:	4770      	bx	lr
 80009e0:	20000fbc 	.word	0x20000fbc
 80009e4:	20000014 	.word	0x20000014

080009e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  return uwTick;
 80009ec:	4b03      	ldr	r3, [pc, #12]	; (80009fc <HAL_GetTick+0x14>)
 80009ee:	681b      	ldr	r3, [r3, #0]
}
 80009f0:	4618      	mov	r0, r3
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop
 80009fc:	20000fbc 	.word	0x20000fbc

08000a00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a00:	b480      	push	{r7}
 8000a02:	b085      	sub	sp, #20
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	f003 0307 	and.w	r3, r3, #7
 8000a0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a10:	4b0c      	ldr	r3, [pc, #48]	; (8000a44 <__NVIC_SetPriorityGrouping+0x44>)
 8000a12:	68db      	ldr	r3, [r3, #12]
 8000a14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a16:	68ba      	ldr	r2, [r7, #8]
 8000a18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a1c:	4013      	ands	r3, r2
 8000a1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a24:	68bb      	ldr	r3, [r7, #8]
 8000a26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a32:	4a04      	ldr	r2, [pc, #16]	; (8000a44 <__NVIC_SetPriorityGrouping+0x44>)
 8000a34:	68bb      	ldr	r3, [r7, #8]
 8000a36:	60d3      	str	r3, [r2, #12]
}
 8000a38:	bf00      	nop
 8000a3a:	3714      	adds	r7, #20
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr
 8000a44:	e000ed00 	.word	0xe000ed00

08000a48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a4c:	4b04      	ldr	r3, [pc, #16]	; (8000a60 <__NVIC_GetPriorityGrouping+0x18>)
 8000a4e:	68db      	ldr	r3, [r3, #12]
 8000a50:	0a1b      	lsrs	r3, r3, #8
 8000a52:	f003 0307 	and.w	r3, r3, #7
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5e:	4770      	bx	lr
 8000a60:	e000ed00 	.word	0xe000ed00

08000a64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b083      	sub	sp, #12
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	6039      	str	r1, [r7, #0]
 8000a6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	db0a      	blt.n	8000a8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	b2da      	uxtb	r2, r3
 8000a7c:	490c      	ldr	r1, [pc, #48]	; (8000ab0 <__NVIC_SetPriority+0x4c>)
 8000a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a82:	0112      	lsls	r2, r2, #4
 8000a84:	b2d2      	uxtb	r2, r2
 8000a86:	440b      	add	r3, r1
 8000a88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a8c:	e00a      	b.n	8000aa4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	b2da      	uxtb	r2, r3
 8000a92:	4908      	ldr	r1, [pc, #32]	; (8000ab4 <__NVIC_SetPriority+0x50>)
 8000a94:	79fb      	ldrb	r3, [r7, #7]
 8000a96:	f003 030f 	and.w	r3, r3, #15
 8000a9a:	3b04      	subs	r3, #4
 8000a9c:	0112      	lsls	r2, r2, #4
 8000a9e:	b2d2      	uxtb	r2, r2
 8000aa0:	440b      	add	r3, r1
 8000aa2:	761a      	strb	r2, [r3, #24]
}
 8000aa4:	bf00      	nop
 8000aa6:	370c      	adds	r7, #12
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr
 8000ab0:	e000e100 	.word	0xe000e100
 8000ab4:	e000ed00 	.word	0xe000ed00

08000ab8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b089      	sub	sp, #36	; 0x24
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	60f8      	str	r0, [r7, #12]
 8000ac0:	60b9      	str	r1, [r7, #8]
 8000ac2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	f003 0307 	and.w	r3, r3, #7
 8000aca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000acc:	69fb      	ldr	r3, [r7, #28]
 8000ace:	f1c3 0307 	rsb	r3, r3, #7
 8000ad2:	2b04      	cmp	r3, #4
 8000ad4:	bf28      	it	cs
 8000ad6:	2304      	movcs	r3, #4
 8000ad8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ada:	69fb      	ldr	r3, [r7, #28]
 8000adc:	3304      	adds	r3, #4
 8000ade:	2b06      	cmp	r3, #6
 8000ae0:	d902      	bls.n	8000ae8 <NVIC_EncodePriority+0x30>
 8000ae2:	69fb      	ldr	r3, [r7, #28]
 8000ae4:	3b03      	subs	r3, #3
 8000ae6:	e000      	b.n	8000aea <NVIC_EncodePriority+0x32>
 8000ae8:	2300      	movs	r3, #0
 8000aea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aec:	f04f 32ff 	mov.w	r2, #4294967295
 8000af0:	69bb      	ldr	r3, [r7, #24]
 8000af2:	fa02 f303 	lsl.w	r3, r2, r3
 8000af6:	43da      	mvns	r2, r3
 8000af8:	68bb      	ldr	r3, [r7, #8]
 8000afa:	401a      	ands	r2, r3
 8000afc:	697b      	ldr	r3, [r7, #20]
 8000afe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b00:	f04f 31ff 	mov.w	r1, #4294967295
 8000b04:	697b      	ldr	r3, [r7, #20]
 8000b06:	fa01 f303 	lsl.w	r3, r1, r3
 8000b0a:	43d9      	mvns	r1, r3
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b10:	4313      	orrs	r3, r2
         );
}
 8000b12:	4618      	mov	r0, r3
 8000b14:	3724      	adds	r7, #36	; 0x24
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
	...

08000b20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	3b01      	subs	r3, #1
 8000b2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b30:	d301      	bcc.n	8000b36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b32:	2301      	movs	r3, #1
 8000b34:	e00f      	b.n	8000b56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b36:	4a0a      	ldr	r2, [pc, #40]	; (8000b60 <SysTick_Config+0x40>)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	3b01      	subs	r3, #1
 8000b3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b3e:	210f      	movs	r1, #15
 8000b40:	f04f 30ff 	mov.w	r0, #4294967295
 8000b44:	f7ff ff8e 	bl	8000a64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b48:	4b05      	ldr	r3, [pc, #20]	; (8000b60 <SysTick_Config+0x40>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b4e:	4b04      	ldr	r3, [pc, #16]	; (8000b60 <SysTick_Config+0x40>)
 8000b50:	2207      	movs	r2, #7
 8000b52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b54:	2300      	movs	r3, #0
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	3708      	adds	r7, #8
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	e000e010 	.word	0xe000e010

08000b64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b6c:	6878      	ldr	r0, [r7, #4]
 8000b6e:	f7ff ff47 	bl	8000a00 <__NVIC_SetPriorityGrouping>
}
 8000b72:	bf00      	nop
 8000b74:	3708      	adds	r7, #8
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}

08000b7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b7a:	b580      	push	{r7, lr}
 8000b7c:	b086      	sub	sp, #24
 8000b7e:	af00      	add	r7, sp, #0
 8000b80:	4603      	mov	r3, r0
 8000b82:	60b9      	str	r1, [r7, #8]
 8000b84:	607a      	str	r2, [r7, #4]
 8000b86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b8c:	f7ff ff5c 	bl	8000a48 <__NVIC_GetPriorityGrouping>
 8000b90:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b92:	687a      	ldr	r2, [r7, #4]
 8000b94:	68b9      	ldr	r1, [r7, #8]
 8000b96:	6978      	ldr	r0, [r7, #20]
 8000b98:	f7ff ff8e 	bl	8000ab8 <NVIC_EncodePriority>
 8000b9c:	4602      	mov	r2, r0
 8000b9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ba2:	4611      	mov	r1, r2
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f7ff ff5d 	bl	8000a64 <__NVIC_SetPriority>
}
 8000baa:	bf00      	nop
 8000bac:	3718      	adds	r7, #24
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}

08000bb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bb2:	b580      	push	{r7, lr}
 8000bb4:	b082      	sub	sp, #8
 8000bb6:	af00      	add	r7, sp, #0
 8000bb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bba:	6878      	ldr	r0, [r7, #4]
 8000bbc:	f7ff ffb0 	bl	8000b20 <SysTick_Config>
 8000bc0:	4603      	mov	r3, r0
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	3708      	adds	r7, #8
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
	...

08000bcc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b087      	sub	sp, #28
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
 8000bd4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bda:	e17f      	b.n	8000edc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	681a      	ldr	r2, [r3, #0]
 8000be0:	2101      	movs	r1, #1
 8000be2:	697b      	ldr	r3, [r7, #20]
 8000be4:	fa01 f303 	lsl.w	r3, r1, r3
 8000be8:	4013      	ands	r3, r2
 8000bea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	f000 8171 	beq.w	8000ed6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	685b      	ldr	r3, [r3, #4]
 8000bf8:	2b01      	cmp	r3, #1
 8000bfa:	d00b      	beq.n	8000c14 <HAL_GPIO_Init+0x48>
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	685b      	ldr	r3, [r3, #4]
 8000c00:	2b02      	cmp	r3, #2
 8000c02:	d007      	beq.n	8000c14 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c08:	2b11      	cmp	r3, #17
 8000c0a:	d003      	beq.n	8000c14 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	685b      	ldr	r3, [r3, #4]
 8000c10:	2b12      	cmp	r3, #18
 8000c12:	d130      	bne.n	8000c76 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	689b      	ldr	r3, [r3, #8]
 8000c18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000c1a:	697b      	ldr	r3, [r7, #20]
 8000c1c:	005b      	lsls	r3, r3, #1
 8000c1e:	2203      	movs	r2, #3
 8000c20:	fa02 f303 	lsl.w	r3, r2, r3
 8000c24:	43db      	mvns	r3, r3
 8000c26:	693a      	ldr	r2, [r7, #16]
 8000c28:	4013      	ands	r3, r2
 8000c2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	68da      	ldr	r2, [r3, #12]
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	005b      	lsls	r3, r3, #1
 8000c34:	fa02 f303 	lsl.w	r3, r2, r3
 8000c38:	693a      	ldr	r2, [r7, #16]
 8000c3a:	4313      	orrs	r3, r2
 8000c3c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	693a      	ldr	r2, [r7, #16]
 8000c42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	685b      	ldr	r3, [r3, #4]
 8000c48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c52:	43db      	mvns	r3, r3
 8000c54:	693a      	ldr	r2, [r7, #16]
 8000c56:	4013      	ands	r3, r2
 8000c58:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	685b      	ldr	r3, [r3, #4]
 8000c5e:	091b      	lsrs	r3, r3, #4
 8000c60:	f003 0201 	and.w	r2, r3, #1
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6a:	693a      	ldr	r2, [r7, #16]
 8000c6c:	4313      	orrs	r3, r2
 8000c6e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	693a      	ldr	r2, [r7, #16]
 8000c74:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	685b      	ldr	r3, [r3, #4]
 8000c7a:	f003 0303 	and.w	r3, r3, #3
 8000c7e:	2b03      	cmp	r3, #3
 8000c80:	d118      	bne.n	8000cb4 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c86:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000c88:	2201      	movs	r2, #1
 8000c8a:	697b      	ldr	r3, [r7, #20]
 8000c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c90:	43db      	mvns	r3, r3
 8000c92:	693a      	ldr	r2, [r7, #16]
 8000c94:	4013      	ands	r3, r2
 8000c96:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	08db      	lsrs	r3, r3, #3
 8000c9e:	f003 0201 	and.w	r2, r3, #1
 8000ca2:	697b      	ldr	r3, [r7, #20]
 8000ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca8:	693a      	ldr	r2, [r7, #16]
 8000caa:	4313      	orrs	r3, r2
 8000cac:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	693a      	ldr	r2, [r7, #16]
 8000cb2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	68db      	ldr	r3, [r3, #12]
 8000cb8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000cba:	697b      	ldr	r3, [r7, #20]
 8000cbc:	005b      	lsls	r3, r3, #1
 8000cbe:	2203      	movs	r2, #3
 8000cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc4:	43db      	mvns	r3, r3
 8000cc6:	693a      	ldr	r2, [r7, #16]
 8000cc8:	4013      	ands	r3, r2
 8000cca:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	689a      	ldr	r2, [r3, #8]
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	005b      	lsls	r3, r3, #1
 8000cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd8:	693a      	ldr	r2, [r7, #16]
 8000cda:	4313      	orrs	r3, r2
 8000cdc:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	693a      	ldr	r2, [r7, #16]
 8000ce2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	2b02      	cmp	r3, #2
 8000cea:	d003      	beq.n	8000cf4 <HAL_GPIO_Init+0x128>
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	685b      	ldr	r3, [r3, #4]
 8000cf0:	2b12      	cmp	r3, #18
 8000cf2:	d123      	bne.n	8000d3c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	08da      	lsrs	r2, r3, #3
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	3208      	adds	r2, #8
 8000cfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d00:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	f003 0307 	and.w	r3, r3, #7
 8000d08:	009b      	lsls	r3, r3, #2
 8000d0a:	220f      	movs	r2, #15
 8000d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d10:	43db      	mvns	r3, r3
 8000d12:	693a      	ldr	r2, [r7, #16]
 8000d14:	4013      	ands	r3, r2
 8000d16:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	691a      	ldr	r2, [r3, #16]
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	f003 0307 	and.w	r3, r3, #7
 8000d22:	009b      	lsls	r3, r3, #2
 8000d24:	fa02 f303 	lsl.w	r3, r2, r3
 8000d28:	693a      	ldr	r2, [r7, #16]
 8000d2a:	4313      	orrs	r3, r2
 8000d2c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d2e:	697b      	ldr	r3, [r7, #20]
 8000d30:	08da      	lsrs	r2, r3, #3
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	3208      	adds	r2, #8
 8000d36:	6939      	ldr	r1, [r7, #16]
 8000d38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000d42:	697b      	ldr	r3, [r7, #20]
 8000d44:	005b      	lsls	r3, r3, #1
 8000d46:	2203      	movs	r2, #3
 8000d48:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4c:	43db      	mvns	r3, r3
 8000d4e:	693a      	ldr	r2, [r7, #16]
 8000d50:	4013      	ands	r3, r2
 8000d52:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	f003 0203 	and.w	r2, r3, #3
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	005b      	lsls	r3, r3, #1
 8000d60:	fa02 f303 	lsl.w	r3, r2, r3
 8000d64:	693a      	ldr	r2, [r7, #16]
 8000d66:	4313      	orrs	r3, r2
 8000d68:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	693a      	ldr	r2, [r7, #16]
 8000d6e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	f000 80ac 	beq.w	8000ed6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d7e:	4b5e      	ldr	r3, [pc, #376]	; (8000ef8 <HAL_GPIO_Init+0x32c>)
 8000d80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d82:	4a5d      	ldr	r2, [pc, #372]	; (8000ef8 <HAL_GPIO_Init+0x32c>)
 8000d84:	f043 0301 	orr.w	r3, r3, #1
 8000d88:	6613      	str	r3, [r2, #96]	; 0x60
 8000d8a:	4b5b      	ldr	r3, [pc, #364]	; (8000ef8 <HAL_GPIO_Init+0x32c>)
 8000d8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d8e:	f003 0301 	and.w	r3, r3, #1
 8000d92:	60bb      	str	r3, [r7, #8]
 8000d94:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000d96:	4a59      	ldr	r2, [pc, #356]	; (8000efc <HAL_GPIO_Init+0x330>)
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	089b      	lsrs	r3, r3, #2
 8000d9c:	3302      	adds	r3, #2
 8000d9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000da2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	f003 0303 	and.w	r3, r3, #3
 8000daa:	009b      	lsls	r3, r3, #2
 8000dac:	220f      	movs	r2, #15
 8000dae:	fa02 f303 	lsl.w	r3, r2, r3
 8000db2:	43db      	mvns	r3, r3
 8000db4:	693a      	ldr	r2, [r7, #16]
 8000db6:	4013      	ands	r3, r2
 8000db8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000dc0:	d025      	beq.n	8000e0e <HAL_GPIO_Init+0x242>
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	4a4e      	ldr	r2, [pc, #312]	; (8000f00 <HAL_GPIO_Init+0x334>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d01f      	beq.n	8000e0a <HAL_GPIO_Init+0x23e>
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	4a4d      	ldr	r2, [pc, #308]	; (8000f04 <HAL_GPIO_Init+0x338>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d019      	beq.n	8000e06 <HAL_GPIO_Init+0x23a>
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4a4c      	ldr	r2, [pc, #304]	; (8000f08 <HAL_GPIO_Init+0x33c>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d013      	beq.n	8000e02 <HAL_GPIO_Init+0x236>
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	4a4b      	ldr	r2, [pc, #300]	; (8000f0c <HAL_GPIO_Init+0x340>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d00d      	beq.n	8000dfe <HAL_GPIO_Init+0x232>
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	4a4a      	ldr	r2, [pc, #296]	; (8000f10 <HAL_GPIO_Init+0x344>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d007      	beq.n	8000dfa <HAL_GPIO_Init+0x22e>
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	4a49      	ldr	r2, [pc, #292]	; (8000f14 <HAL_GPIO_Init+0x348>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d101      	bne.n	8000df6 <HAL_GPIO_Init+0x22a>
 8000df2:	2306      	movs	r3, #6
 8000df4:	e00c      	b.n	8000e10 <HAL_GPIO_Init+0x244>
 8000df6:	2307      	movs	r3, #7
 8000df8:	e00a      	b.n	8000e10 <HAL_GPIO_Init+0x244>
 8000dfa:	2305      	movs	r3, #5
 8000dfc:	e008      	b.n	8000e10 <HAL_GPIO_Init+0x244>
 8000dfe:	2304      	movs	r3, #4
 8000e00:	e006      	b.n	8000e10 <HAL_GPIO_Init+0x244>
 8000e02:	2303      	movs	r3, #3
 8000e04:	e004      	b.n	8000e10 <HAL_GPIO_Init+0x244>
 8000e06:	2302      	movs	r3, #2
 8000e08:	e002      	b.n	8000e10 <HAL_GPIO_Init+0x244>
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	e000      	b.n	8000e10 <HAL_GPIO_Init+0x244>
 8000e0e:	2300      	movs	r3, #0
 8000e10:	697a      	ldr	r2, [r7, #20]
 8000e12:	f002 0203 	and.w	r2, r2, #3
 8000e16:	0092      	lsls	r2, r2, #2
 8000e18:	4093      	lsls	r3, r2
 8000e1a:	693a      	ldr	r2, [r7, #16]
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000e20:	4936      	ldr	r1, [pc, #216]	; (8000efc <HAL_GPIO_Init+0x330>)
 8000e22:	697b      	ldr	r3, [r7, #20]
 8000e24:	089b      	lsrs	r3, r3, #2
 8000e26:	3302      	adds	r3, #2
 8000e28:	693a      	ldr	r2, [r7, #16]
 8000e2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000e2e:	4b3a      	ldr	r3, [pc, #232]	; (8000f18 <HAL_GPIO_Init+0x34c>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	43db      	mvns	r3, r3
 8000e38:	693a      	ldr	r2, [r7, #16]
 8000e3a:	4013      	ands	r3, r2
 8000e3c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d003      	beq.n	8000e52 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000e4a:	693a      	ldr	r2, [r7, #16]
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	4313      	orrs	r3, r2
 8000e50:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000e52:	4a31      	ldr	r2, [pc, #196]	; (8000f18 <HAL_GPIO_Init+0x34c>)
 8000e54:	693b      	ldr	r3, [r7, #16]
 8000e56:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000e58:	4b2f      	ldr	r3, [pc, #188]	; (8000f18 <HAL_GPIO_Init+0x34c>)
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	43db      	mvns	r3, r3
 8000e62:	693a      	ldr	r2, [r7, #16]
 8000e64:	4013      	ands	r3, r2
 8000e66:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d003      	beq.n	8000e7c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000e74:	693a      	ldr	r2, [r7, #16]
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	4313      	orrs	r3, r2
 8000e7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000e7c:	4a26      	ldr	r2, [pc, #152]	; (8000f18 <HAL_GPIO_Init+0x34c>)
 8000e7e:	693b      	ldr	r3, [r7, #16]
 8000e80:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000e82:	4b25      	ldr	r3, [pc, #148]	; (8000f18 <HAL_GPIO_Init+0x34c>)
 8000e84:	689b      	ldr	r3, [r3, #8]
 8000e86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	43db      	mvns	r3, r3
 8000e8c:	693a      	ldr	r2, [r7, #16]
 8000e8e:	4013      	ands	r3, r2
 8000e90:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d003      	beq.n	8000ea6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000e9e:	693a      	ldr	r2, [r7, #16]
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	4313      	orrs	r3, r2
 8000ea4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000ea6:	4a1c      	ldr	r2, [pc, #112]	; (8000f18 <HAL_GPIO_Init+0x34c>)
 8000ea8:	693b      	ldr	r3, [r7, #16]
 8000eaa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000eac:	4b1a      	ldr	r3, [pc, #104]	; (8000f18 <HAL_GPIO_Init+0x34c>)
 8000eae:	68db      	ldr	r3, [r3, #12]
 8000eb0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	43db      	mvns	r3, r3
 8000eb6:	693a      	ldr	r2, [r7, #16]
 8000eb8:	4013      	ands	r3, r2
 8000eba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d003      	beq.n	8000ed0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000ec8:	693a      	ldr	r2, [r7, #16]
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000ed0:	4a11      	ldr	r2, [pc, #68]	; (8000f18 <HAL_GPIO_Init+0x34c>)
 8000ed2:	693b      	ldr	r3, [r7, #16]
 8000ed4:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000ed6:	697b      	ldr	r3, [r7, #20]
 8000ed8:	3301      	adds	r3, #1
 8000eda:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	681a      	ldr	r2, [r3, #0]
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	fa22 f303 	lsr.w	r3, r2, r3
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	f47f ae78 	bne.w	8000bdc <HAL_GPIO_Init+0x10>
  }
}
 8000eec:	bf00      	nop
 8000eee:	371c      	adds	r7, #28
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr
 8000ef8:	40021000 	.word	0x40021000
 8000efc:	40010000 	.word	0x40010000
 8000f00:	48000400 	.word	0x48000400
 8000f04:	48000800 	.word	0x48000800
 8000f08:	48000c00 	.word	0x48000c00
 8000f0c:	48001000 	.word	0x48001000
 8000f10:	48001400 	.word	0x48001400
 8000f14:	48001800 	.word	0x48001800
 8000f18:	40010400 	.word	0x40010400

08000f1c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b085      	sub	sp, #20
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
 8000f24:	460b      	mov	r3, r1
 8000f26:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	691a      	ldr	r2, [r3, #16]
 8000f2c:	887b      	ldrh	r3, [r7, #2]
 8000f2e:	4013      	ands	r3, r2
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d002      	beq.n	8000f3a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000f34:	2301      	movs	r3, #1
 8000f36:	73fb      	strb	r3, [r7, #15]
 8000f38:	e001      	b.n	8000f3e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000f3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	3714      	adds	r7, #20
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr

08000f4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
 8000f54:	460b      	mov	r3, r1
 8000f56:	807b      	strh	r3, [r7, #2]
 8000f58:	4613      	mov	r3, r2
 8000f5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f5c:	787b      	ldrb	r3, [r7, #1]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d003      	beq.n	8000f6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f62:	887a      	ldrh	r2, [r7, #2]
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f68:	e002      	b.n	8000f70 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f6a:	887a      	ldrh	r2, [r7, #2]
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f70:	bf00      	nop
 8000f72:	370c      	adds	r7, #12
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr

08000f7c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
 8000f84:	460b      	mov	r3, r1
 8000f86:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	695a      	ldr	r2, [r3, #20]
 8000f8c:	887b      	ldrh	r3, [r7, #2]
 8000f8e:	4013      	ands	r3, r2
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d003      	beq.n	8000f9c <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f94:	887a      	ldrh	r2, [r7, #2]
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8000f9a:	e002      	b.n	8000fa2 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f9c:	887a      	ldrh	r2, [r7, #2]
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	619a      	str	r2, [r3, #24]
}
 8000fa2:	bf00      	nop
 8000fa4:	370c      	adds	r7, #12
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
	...

08000fb0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000fb4:	4b04      	ldr	r3, [pc, #16]	; (8000fc8 <HAL_PWREx_GetVoltageRange+0x18>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	40007000 	.word	0x40007000

08000fcc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b085      	sub	sp, #20
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000fda:	d130      	bne.n	800103e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000fdc:	4b23      	ldr	r3, [pc, #140]	; (800106c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000fe4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000fe8:	d038      	beq.n	800105c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fea:	4b20      	ldr	r3, [pc, #128]	; (800106c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000ff2:	4a1e      	ldr	r2, [pc, #120]	; (800106c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ff4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ff8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000ffa:	4b1d      	ldr	r3, [pc, #116]	; (8001070 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	2232      	movs	r2, #50	; 0x32
 8001000:	fb02 f303 	mul.w	r3, r2, r3
 8001004:	4a1b      	ldr	r2, [pc, #108]	; (8001074 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001006:	fba2 2303 	umull	r2, r3, r2, r3
 800100a:	0c9b      	lsrs	r3, r3, #18
 800100c:	3301      	adds	r3, #1
 800100e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001010:	e002      	b.n	8001018 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	3b01      	subs	r3, #1
 8001016:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001018:	4b14      	ldr	r3, [pc, #80]	; (800106c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800101a:	695b      	ldr	r3, [r3, #20]
 800101c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001020:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001024:	d102      	bne.n	800102c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d1f2      	bne.n	8001012 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800102c:	4b0f      	ldr	r3, [pc, #60]	; (800106c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800102e:	695b      	ldr	r3, [r3, #20]
 8001030:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001034:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001038:	d110      	bne.n	800105c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800103a:	2303      	movs	r3, #3
 800103c:	e00f      	b.n	800105e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800103e:	4b0b      	ldr	r3, [pc, #44]	; (800106c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001046:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800104a:	d007      	beq.n	800105c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800104c:	4b07      	ldr	r3, [pc, #28]	; (800106c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001054:	4a05      	ldr	r2, [pc, #20]	; (800106c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001056:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800105a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800105c:	2300      	movs	r3, #0
}
 800105e:	4618      	mov	r0, r3
 8001060:	3714      	adds	r7, #20
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	40007000 	.word	0x40007000
 8001070:	2000000c 	.word	0x2000000c
 8001074:	431bde83 	.word	0x431bde83

08001078 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b088      	sub	sp, #32
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d101      	bne.n	800108a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001086:	2301      	movs	r3, #1
 8001088:	e3d4      	b.n	8001834 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800108a:	4ba1      	ldr	r3, [pc, #644]	; (8001310 <HAL_RCC_OscConfig+0x298>)
 800108c:	689b      	ldr	r3, [r3, #8]
 800108e:	f003 030c 	and.w	r3, r3, #12
 8001092:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001094:	4b9e      	ldr	r3, [pc, #632]	; (8001310 <HAL_RCC_OscConfig+0x298>)
 8001096:	68db      	ldr	r3, [r3, #12]
 8001098:	f003 0303 	and.w	r3, r3, #3
 800109c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f003 0310 	and.w	r3, r3, #16
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	f000 80e4 	beq.w	8001274 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80010ac:	69bb      	ldr	r3, [r7, #24]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d007      	beq.n	80010c2 <HAL_RCC_OscConfig+0x4a>
 80010b2:	69bb      	ldr	r3, [r7, #24]
 80010b4:	2b0c      	cmp	r3, #12
 80010b6:	f040 808b 	bne.w	80011d0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	2b01      	cmp	r3, #1
 80010be:	f040 8087 	bne.w	80011d0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80010c2:	4b93      	ldr	r3, [pc, #588]	; (8001310 <HAL_RCC_OscConfig+0x298>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f003 0302 	and.w	r3, r3, #2
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d005      	beq.n	80010da <HAL_RCC_OscConfig+0x62>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	699b      	ldr	r3, [r3, #24]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d101      	bne.n	80010da <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
 80010d8:	e3ac      	b.n	8001834 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6a1a      	ldr	r2, [r3, #32]
 80010de:	4b8c      	ldr	r3, [pc, #560]	; (8001310 <HAL_RCC_OscConfig+0x298>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f003 0308 	and.w	r3, r3, #8
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d004      	beq.n	80010f4 <HAL_RCC_OscConfig+0x7c>
 80010ea:	4b89      	ldr	r3, [pc, #548]	; (8001310 <HAL_RCC_OscConfig+0x298>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80010f2:	e005      	b.n	8001100 <HAL_RCC_OscConfig+0x88>
 80010f4:	4b86      	ldr	r3, [pc, #536]	; (8001310 <HAL_RCC_OscConfig+0x298>)
 80010f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010fa:	091b      	lsrs	r3, r3, #4
 80010fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001100:	4293      	cmp	r3, r2
 8001102:	d223      	bcs.n	800114c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6a1b      	ldr	r3, [r3, #32]
 8001108:	4618      	mov	r0, r3
 800110a:	f000 fd07 	bl	8001b1c <RCC_SetFlashLatencyFromMSIRange>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001114:	2301      	movs	r3, #1
 8001116:	e38d      	b.n	8001834 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001118:	4b7d      	ldr	r3, [pc, #500]	; (8001310 <HAL_RCC_OscConfig+0x298>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a7c      	ldr	r2, [pc, #496]	; (8001310 <HAL_RCC_OscConfig+0x298>)
 800111e:	f043 0308 	orr.w	r3, r3, #8
 8001122:	6013      	str	r3, [r2, #0]
 8001124:	4b7a      	ldr	r3, [pc, #488]	; (8001310 <HAL_RCC_OscConfig+0x298>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	6a1b      	ldr	r3, [r3, #32]
 8001130:	4977      	ldr	r1, [pc, #476]	; (8001310 <HAL_RCC_OscConfig+0x298>)
 8001132:	4313      	orrs	r3, r2
 8001134:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001136:	4b76      	ldr	r3, [pc, #472]	; (8001310 <HAL_RCC_OscConfig+0x298>)
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	69db      	ldr	r3, [r3, #28]
 8001142:	021b      	lsls	r3, r3, #8
 8001144:	4972      	ldr	r1, [pc, #456]	; (8001310 <HAL_RCC_OscConfig+0x298>)
 8001146:	4313      	orrs	r3, r2
 8001148:	604b      	str	r3, [r1, #4]
 800114a:	e025      	b.n	8001198 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800114c:	4b70      	ldr	r3, [pc, #448]	; (8001310 <HAL_RCC_OscConfig+0x298>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a6f      	ldr	r2, [pc, #444]	; (8001310 <HAL_RCC_OscConfig+0x298>)
 8001152:	f043 0308 	orr.w	r3, r3, #8
 8001156:	6013      	str	r3, [r2, #0]
 8001158:	4b6d      	ldr	r3, [pc, #436]	; (8001310 <HAL_RCC_OscConfig+0x298>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6a1b      	ldr	r3, [r3, #32]
 8001164:	496a      	ldr	r1, [pc, #424]	; (8001310 <HAL_RCC_OscConfig+0x298>)
 8001166:	4313      	orrs	r3, r2
 8001168:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800116a:	4b69      	ldr	r3, [pc, #420]	; (8001310 <HAL_RCC_OscConfig+0x298>)
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	69db      	ldr	r3, [r3, #28]
 8001176:	021b      	lsls	r3, r3, #8
 8001178:	4965      	ldr	r1, [pc, #404]	; (8001310 <HAL_RCC_OscConfig+0x298>)
 800117a:	4313      	orrs	r3, r2
 800117c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800117e:	69bb      	ldr	r3, [r7, #24]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d109      	bne.n	8001198 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6a1b      	ldr	r3, [r3, #32]
 8001188:	4618      	mov	r0, r3
 800118a:	f000 fcc7 	bl	8001b1c <RCC_SetFlashLatencyFromMSIRange>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001194:	2301      	movs	r3, #1
 8001196:	e34d      	b.n	8001834 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001198:	f000 fc36 	bl	8001a08 <HAL_RCC_GetSysClockFreq>
 800119c:	4601      	mov	r1, r0
 800119e:	4b5c      	ldr	r3, [pc, #368]	; (8001310 <HAL_RCC_OscConfig+0x298>)
 80011a0:	689b      	ldr	r3, [r3, #8]
 80011a2:	091b      	lsrs	r3, r3, #4
 80011a4:	f003 030f 	and.w	r3, r3, #15
 80011a8:	4a5a      	ldr	r2, [pc, #360]	; (8001314 <HAL_RCC_OscConfig+0x29c>)
 80011aa:	5cd3      	ldrb	r3, [r2, r3]
 80011ac:	f003 031f 	and.w	r3, r3, #31
 80011b0:	fa21 f303 	lsr.w	r3, r1, r3
 80011b4:	4a58      	ldr	r2, [pc, #352]	; (8001318 <HAL_RCC_OscConfig+0x2a0>)
 80011b6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80011b8:	4b58      	ldr	r3, [pc, #352]	; (800131c <HAL_RCC_OscConfig+0x2a4>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4618      	mov	r0, r3
 80011be:	f7ff fbc7 	bl	8000950 <HAL_InitTick>
 80011c2:	4603      	mov	r3, r0
 80011c4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80011c6:	7bfb      	ldrb	r3, [r7, #15]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d052      	beq.n	8001272 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80011cc:	7bfb      	ldrb	r3, [r7, #15]
 80011ce:	e331      	b.n	8001834 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	699b      	ldr	r3, [r3, #24]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d032      	beq.n	800123e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80011d8:	4b4d      	ldr	r3, [pc, #308]	; (8001310 <HAL_RCC_OscConfig+0x298>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a4c      	ldr	r2, [pc, #304]	; (8001310 <HAL_RCC_OscConfig+0x298>)
 80011de:	f043 0301 	orr.w	r3, r3, #1
 80011e2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80011e4:	f7ff fc00 	bl	80009e8 <HAL_GetTick>
 80011e8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80011ea:	e008      	b.n	80011fe <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80011ec:	f7ff fbfc 	bl	80009e8 <HAL_GetTick>
 80011f0:	4602      	mov	r2, r0
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	1ad3      	subs	r3, r2, r3
 80011f6:	2b02      	cmp	r3, #2
 80011f8:	d901      	bls.n	80011fe <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80011fa:	2303      	movs	r3, #3
 80011fc:	e31a      	b.n	8001834 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80011fe:	4b44      	ldr	r3, [pc, #272]	; (8001310 <HAL_RCC_OscConfig+0x298>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f003 0302 	and.w	r3, r3, #2
 8001206:	2b00      	cmp	r3, #0
 8001208:	d0f0      	beq.n	80011ec <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800120a:	4b41      	ldr	r3, [pc, #260]	; (8001310 <HAL_RCC_OscConfig+0x298>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4a40      	ldr	r2, [pc, #256]	; (8001310 <HAL_RCC_OscConfig+0x298>)
 8001210:	f043 0308 	orr.w	r3, r3, #8
 8001214:	6013      	str	r3, [r2, #0]
 8001216:	4b3e      	ldr	r3, [pc, #248]	; (8001310 <HAL_RCC_OscConfig+0x298>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6a1b      	ldr	r3, [r3, #32]
 8001222:	493b      	ldr	r1, [pc, #236]	; (8001310 <HAL_RCC_OscConfig+0x298>)
 8001224:	4313      	orrs	r3, r2
 8001226:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001228:	4b39      	ldr	r3, [pc, #228]	; (8001310 <HAL_RCC_OscConfig+0x298>)
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	69db      	ldr	r3, [r3, #28]
 8001234:	021b      	lsls	r3, r3, #8
 8001236:	4936      	ldr	r1, [pc, #216]	; (8001310 <HAL_RCC_OscConfig+0x298>)
 8001238:	4313      	orrs	r3, r2
 800123a:	604b      	str	r3, [r1, #4]
 800123c:	e01a      	b.n	8001274 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800123e:	4b34      	ldr	r3, [pc, #208]	; (8001310 <HAL_RCC_OscConfig+0x298>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4a33      	ldr	r2, [pc, #204]	; (8001310 <HAL_RCC_OscConfig+0x298>)
 8001244:	f023 0301 	bic.w	r3, r3, #1
 8001248:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800124a:	f7ff fbcd 	bl	80009e8 <HAL_GetTick>
 800124e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001250:	e008      	b.n	8001264 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001252:	f7ff fbc9 	bl	80009e8 <HAL_GetTick>
 8001256:	4602      	mov	r2, r0
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	1ad3      	subs	r3, r2, r3
 800125c:	2b02      	cmp	r3, #2
 800125e:	d901      	bls.n	8001264 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001260:	2303      	movs	r3, #3
 8001262:	e2e7      	b.n	8001834 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001264:	4b2a      	ldr	r3, [pc, #168]	; (8001310 <HAL_RCC_OscConfig+0x298>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f003 0302 	and.w	r3, r3, #2
 800126c:	2b00      	cmp	r3, #0
 800126e:	d1f0      	bne.n	8001252 <HAL_RCC_OscConfig+0x1da>
 8001270:	e000      	b.n	8001274 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001272:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f003 0301 	and.w	r3, r3, #1
 800127c:	2b00      	cmp	r3, #0
 800127e:	d074      	beq.n	800136a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001280:	69bb      	ldr	r3, [r7, #24]
 8001282:	2b08      	cmp	r3, #8
 8001284:	d005      	beq.n	8001292 <HAL_RCC_OscConfig+0x21a>
 8001286:	69bb      	ldr	r3, [r7, #24]
 8001288:	2b0c      	cmp	r3, #12
 800128a:	d10e      	bne.n	80012aa <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	2b03      	cmp	r3, #3
 8001290:	d10b      	bne.n	80012aa <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001292:	4b1f      	ldr	r3, [pc, #124]	; (8001310 <HAL_RCC_OscConfig+0x298>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800129a:	2b00      	cmp	r3, #0
 800129c:	d064      	beq.n	8001368 <HAL_RCC_OscConfig+0x2f0>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d160      	bne.n	8001368 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
 80012a8:	e2c4      	b.n	8001834 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012b2:	d106      	bne.n	80012c2 <HAL_RCC_OscConfig+0x24a>
 80012b4:	4b16      	ldr	r3, [pc, #88]	; (8001310 <HAL_RCC_OscConfig+0x298>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a15      	ldr	r2, [pc, #84]	; (8001310 <HAL_RCC_OscConfig+0x298>)
 80012ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012be:	6013      	str	r3, [r2, #0]
 80012c0:	e01d      	b.n	80012fe <HAL_RCC_OscConfig+0x286>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012ca:	d10c      	bne.n	80012e6 <HAL_RCC_OscConfig+0x26e>
 80012cc:	4b10      	ldr	r3, [pc, #64]	; (8001310 <HAL_RCC_OscConfig+0x298>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a0f      	ldr	r2, [pc, #60]	; (8001310 <HAL_RCC_OscConfig+0x298>)
 80012d2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012d6:	6013      	str	r3, [r2, #0]
 80012d8:	4b0d      	ldr	r3, [pc, #52]	; (8001310 <HAL_RCC_OscConfig+0x298>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a0c      	ldr	r2, [pc, #48]	; (8001310 <HAL_RCC_OscConfig+0x298>)
 80012de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012e2:	6013      	str	r3, [r2, #0]
 80012e4:	e00b      	b.n	80012fe <HAL_RCC_OscConfig+0x286>
 80012e6:	4b0a      	ldr	r3, [pc, #40]	; (8001310 <HAL_RCC_OscConfig+0x298>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4a09      	ldr	r2, [pc, #36]	; (8001310 <HAL_RCC_OscConfig+0x298>)
 80012ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012f0:	6013      	str	r3, [r2, #0]
 80012f2:	4b07      	ldr	r3, [pc, #28]	; (8001310 <HAL_RCC_OscConfig+0x298>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4a06      	ldr	r2, [pc, #24]	; (8001310 <HAL_RCC_OscConfig+0x298>)
 80012f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012fc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d01c      	beq.n	8001340 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001306:	f7ff fb6f 	bl	80009e8 <HAL_GetTick>
 800130a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800130c:	e011      	b.n	8001332 <HAL_RCC_OscConfig+0x2ba>
 800130e:	bf00      	nop
 8001310:	40021000 	.word	0x40021000
 8001314:	08003154 	.word	0x08003154
 8001318:	2000000c 	.word	0x2000000c
 800131c:	20000010 	.word	0x20000010
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001320:	f7ff fb62 	bl	80009e8 <HAL_GetTick>
 8001324:	4602      	mov	r2, r0
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	1ad3      	subs	r3, r2, r3
 800132a:	2b64      	cmp	r3, #100	; 0x64
 800132c:	d901      	bls.n	8001332 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800132e:	2303      	movs	r3, #3
 8001330:	e280      	b.n	8001834 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001332:	4baf      	ldr	r3, [pc, #700]	; (80015f0 <HAL_RCC_OscConfig+0x578>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800133a:	2b00      	cmp	r3, #0
 800133c:	d0f0      	beq.n	8001320 <HAL_RCC_OscConfig+0x2a8>
 800133e:	e014      	b.n	800136a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001340:	f7ff fb52 	bl	80009e8 <HAL_GetTick>
 8001344:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001346:	e008      	b.n	800135a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001348:	f7ff fb4e 	bl	80009e8 <HAL_GetTick>
 800134c:	4602      	mov	r2, r0
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	2b64      	cmp	r3, #100	; 0x64
 8001354:	d901      	bls.n	800135a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001356:	2303      	movs	r3, #3
 8001358:	e26c      	b.n	8001834 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800135a:	4ba5      	ldr	r3, [pc, #660]	; (80015f0 <HAL_RCC_OscConfig+0x578>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001362:	2b00      	cmp	r3, #0
 8001364:	d1f0      	bne.n	8001348 <HAL_RCC_OscConfig+0x2d0>
 8001366:	e000      	b.n	800136a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001368:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f003 0302 	and.w	r3, r3, #2
 8001372:	2b00      	cmp	r3, #0
 8001374:	d060      	beq.n	8001438 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001376:	69bb      	ldr	r3, [r7, #24]
 8001378:	2b04      	cmp	r3, #4
 800137a:	d005      	beq.n	8001388 <HAL_RCC_OscConfig+0x310>
 800137c:	69bb      	ldr	r3, [r7, #24]
 800137e:	2b0c      	cmp	r3, #12
 8001380:	d119      	bne.n	80013b6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	2b02      	cmp	r3, #2
 8001386:	d116      	bne.n	80013b6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001388:	4b99      	ldr	r3, [pc, #612]	; (80015f0 <HAL_RCC_OscConfig+0x578>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001390:	2b00      	cmp	r3, #0
 8001392:	d005      	beq.n	80013a0 <HAL_RCC_OscConfig+0x328>
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	68db      	ldr	r3, [r3, #12]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d101      	bne.n	80013a0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800139c:	2301      	movs	r3, #1
 800139e:	e249      	b.n	8001834 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013a0:	4b93      	ldr	r3, [pc, #588]	; (80015f0 <HAL_RCC_OscConfig+0x578>)
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	691b      	ldr	r3, [r3, #16]
 80013ac:	061b      	lsls	r3, r3, #24
 80013ae:	4990      	ldr	r1, [pc, #576]	; (80015f0 <HAL_RCC_OscConfig+0x578>)
 80013b0:	4313      	orrs	r3, r2
 80013b2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013b4:	e040      	b.n	8001438 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	68db      	ldr	r3, [r3, #12]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d023      	beq.n	8001406 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013be:	4b8c      	ldr	r3, [pc, #560]	; (80015f0 <HAL_RCC_OscConfig+0x578>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a8b      	ldr	r2, [pc, #556]	; (80015f0 <HAL_RCC_OscConfig+0x578>)
 80013c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013ca:	f7ff fb0d 	bl	80009e8 <HAL_GetTick>
 80013ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80013d0:	e008      	b.n	80013e4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013d2:	f7ff fb09 	bl	80009e8 <HAL_GetTick>
 80013d6:	4602      	mov	r2, r0
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	1ad3      	subs	r3, r2, r3
 80013dc:	2b02      	cmp	r3, #2
 80013de:	d901      	bls.n	80013e4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80013e0:	2303      	movs	r3, #3
 80013e2:	e227      	b.n	8001834 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80013e4:	4b82      	ldr	r3, [pc, #520]	; (80015f0 <HAL_RCC_OscConfig+0x578>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d0f0      	beq.n	80013d2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013f0:	4b7f      	ldr	r3, [pc, #508]	; (80015f0 <HAL_RCC_OscConfig+0x578>)
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	691b      	ldr	r3, [r3, #16]
 80013fc:	061b      	lsls	r3, r3, #24
 80013fe:	497c      	ldr	r1, [pc, #496]	; (80015f0 <HAL_RCC_OscConfig+0x578>)
 8001400:	4313      	orrs	r3, r2
 8001402:	604b      	str	r3, [r1, #4]
 8001404:	e018      	b.n	8001438 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001406:	4b7a      	ldr	r3, [pc, #488]	; (80015f0 <HAL_RCC_OscConfig+0x578>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4a79      	ldr	r2, [pc, #484]	; (80015f0 <HAL_RCC_OscConfig+0x578>)
 800140c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001410:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001412:	f7ff fae9 	bl	80009e8 <HAL_GetTick>
 8001416:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001418:	e008      	b.n	800142c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800141a:	f7ff fae5 	bl	80009e8 <HAL_GetTick>
 800141e:	4602      	mov	r2, r0
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	1ad3      	subs	r3, r2, r3
 8001424:	2b02      	cmp	r3, #2
 8001426:	d901      	bls.n	800142c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001428:	2303      	movs	r3, #3
 800142a:	e203      	b.n	8001834 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800142c:	4b70      	ldr	r3, [pc, #448]	; (80015f0 <HAL_RCC_OscConfig+0x578>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001434:	2b00      	cmp	r3, #0
 8001436:	d1f0      	bne.n	800141a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f003 0308 	and.w	r3, r3, #8
 8001440:	2b00      	cmp	r3, #0
 8001442:	d03c      	beq.n	80014be <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	695b      	ldr	r3, [r3, #20]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d01c      	beq.n	8001486 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800144c:	4b68      	ldr	r3, [pc, #416]	; (80015f0 <HAL_RCC_OscConfig+0x578>)
 800144e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001452:	4a67      	ldr	r2, [pc, #412]	; (80015f0 <HAL_RCC_OscConfig+0x578>)
 8001454:	f043 0301 	orr.w	r3, r3, #1
 8001458:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800145c:	f7ff fac4 	bl	80009e8 <HAL_GetTick>
 8001460:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001462:	e008      	b.n	8001476 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001464:	f7ff fac0 	bl	80009e8 <HAL_GetTick>
 8001468:	4602      	mov	r2, r0
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	2b02      	cmp	r3, #2
 8001470:	d901      	bls.n	8001476 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001472:	2303      	movs	r3, #3
 8001474:	e1de      	b.n	8001834 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001476:	4b5e      	ldr	r3, [pc, #376]	; (80015f0 <HAL_RCC_OscConfig+0x578>)
 8001478:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800147c:	f003 0302 	and.w	r3, r3, #2
 8001480:	2b00      	cmp	r3, #0
 8001482:	d0ef      	beq.n	8001464 <HAL_RCC_OscConfig+0x3ec>
 8001484:	e01b      	b.n	80014be <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001486:	4b5a      	ldr	r3, [pc, #360]	; (80015f0 <HAL_RCC_OscConfig+0x578>)
 8001488:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800148c:	4a58      	ldr	r2, [pc, #352]	; (80015f0 <HAL_RCC_OscConfig+0x578>)
 800148e:	f023 0301 	bic.w	r3, r3, #1
 8001492:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001496:	f7ff faa7 	bl	80009e8 <HAL_GetTick>
 800149a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800149c:	e008      	b.n	80014b0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800149e:	f7ff faa3 	bl	80009e8 <HAL_GetTick>
 80014a2:	4602      	mov	r2, r0
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	1ad3      	subs	r3, r2, r3
 80014a8:	2b02      	cmp	r3, #2
 80014aa:	d901      	bls.n	80014b0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80014ac:	2303      	movs	r3, #3
 80014ae:	e1c1      	b.n	8001834 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80014b0:	4b4f      	ldr	r3, [pc, #316]	; (80015f0 <HAL_RCC_OscConfig+0x578>)
 80014b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014b6:	f003 0302 	and.w	r3, r3, #2
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d1ef      	bne.n	800149e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f003 0304 	and.w	r3, r3, #4
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	f000 80a6 	beq.w	8001618 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014cc:	2300      	movs	r3, #0
 80014ce:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80014d0:	4b47      	ldr	r3, [pc, #284]	; (80015f0 <HAL_RCC_OscConfig+0x578>)
 80014d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d10d      	bne.n	80014f8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014dc:	4b44      	ldr	r3, [pc, #272]	; (80015f0 <HAL_RCC_OscConfig+0x578>)
 80014de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014e0:	4a43      	ldr	r2, [pc, #268]	; (80015f0 <HAL_RCC_OscConfig+0x578>)
 80014e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014e6:	6593      	str	r3, [r2, #88]	; 0x58
 80014e8:	4b41      	ldr	r3, [pc, #260]	; (80015f0 <HAL_RCC_OscConfig+0x578>)
 80014ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014f0:	60bb      	str	r3, [r7, #8]
 80014f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014f4:	2301      	movs	r3, #1
 80014f6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014f8:	4b3e      	ldr	r3, [pc, #248]	; (80015f4 <HAL_RCC_OscConfig+0x57c>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001500:	2b00      	cmp	r3, #0
 8001502:	d118      	bne.n	8001536 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001504:	4b3b      	ldr	r3, [pc, #236]	; (80015f4 <HAL_RCC_OscConfig+0x57c>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a3a      	ldr	r2, [pc, #232]	; (80015f4 <HAL_RCC_OscConfig+0x57c>)
 800150a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800150e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001510:	f7ff fa6a 	bl	80009e8 <HAL_GetTick>
 8001514:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001516:	e008      	b.n	800152a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001518:	f7ff fa66 	bl	80009e8 <HAL_GetTick>
 800151c:	4602      	mov	r2, r0
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	2b02      	cmp	r3, #2
 8001524:	d901      	bls.n	800152a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001526:	2303      	movs	r3, #3
 8001528:	e184      	b.n	8001834 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800152a:	4b32      	ldr	r3, [pc, #200]	; (80015f4 <HAL_RCC_OscConfig+0x57c>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001532:	2b00      	cmp	r3, #0
 8001534:	d0f0      	beq.n	8001518 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	2b01      	cmp	r3, #1
 800153c:	d108      	bne.n	8001550 <HAL_RCC_OscConfig+0x4d8>
 800153e:	4b2c      	ldr	r3, [pc, #176]	; (80015f0 <HAL_RCC_OscConfig+0x578>)
 8001540:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001544:	4a2a      	ldr	r2, [pc, #168]	; (80015f0 <HAL_RCC_OscConfig+0x578>)
 8001546:	f043 0301 	orr.w	r3, r3, #1
 800154a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800154e:	e024      	b.n	800159a <HAL_RCC_OscConfig+0x522>
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	2b05      	cmp	r3, #5
 8001556:	d110      	bne.n	800157a <HAL_RCC_OscConfig+0x502>
 8001558:	4b25      	ldr	r3, [pc, #148]	; (80015f0 <HAL_RCC_OscConfig+0x578>)
 800155a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800155e:	4a24      	ldr	r2, [pc, #144]	; (80015f0 <HAL_RCC_OscConfig+0x578>)
 8001560:	f043 0304 	orr.w	r3, r3, #4
 8001564:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001568:	4b21      	ldr	r3, [pc, #132]	; (80015f0 <HAL_RCC_OscConfig+0x578>)
 800156a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800156e:	4a20      	ldr	r2, [pc, #128]	; (80015f0 <HAL_RCC_OscConfig+0x578>)
 8001570:	f043 0301 	orr.w	r3, r3, #1
 8001574:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001578:	e00f      	b.n	800159a <HAL_RCC_OscConfig+0x522>
 800157a:	4b1d      	ldr	r3, [pc, #116]	; (80015f0 <HAL_RCC_OscConfig+0x578>)
 800157c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001580:	4a1b      	ldr	r2, [pc, #108]	; (80015f0 <HAL_RCC_OscConfig+0x578>)
 8001582:	f023 0301 	bic.w	r3, r3, #1
 8001586:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800158a:	4b19      	ldr	r3, [pc, #100]	; (80015f0 <HAL_RCC_OscConfig+0x578>)
 800158c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001590:	4a17      	ldr	r2, [pc, #92]	; (80015f0 <HAL_RCC_OscConfig+0x578>)
 8001592:	f023 0304 	bic.w	r3, r3, #4
 8001596:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	689b      	ldr	r3, [r3, #8]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d016      	beq.n	80015d0 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015a2:	f7ff fa21 	bl	80009e8 <HAL_GetTick>
 80015a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80015a8:	e00a      	b.n	80015c0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015aa:	f7ff fa1d 	bl	80009e8 <HAL_GetTick>
 80015ae:	4602      	mov	r2, r0
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	1ad3      	subs	r3, r2, r3
 80015b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d901      	bls.n	80015c0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80015bc:	2303      	movs	r3, #3
 80015be:	e139      	b.n	8001834 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80015c0:	4b0b      	ldr	r3, [pc, #44]	; (80015f0 <HAL_RCC_OscConfig+0x578>)
 80015c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015c6:	f003 0302 	and.w	r3, r3, #2
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d0ed      	beq.n	80015aa <HAL_RCC_OscConfig+0x532>
 80015ce:	e01a      	b.n	8001606 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015d0:	f7ff fa0a 	bl	80009e8 <HAL_GetTick>
 80015d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80015d6:	e00f      	b.n	80015f8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015d8:	f7ff fa06 	bl	80009e8 <HAL_GetTick>
 80015dc:	4602      	mov	r2, r0
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d906      	bls.n	80015f8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80015ea:	2303      	movs	r3, #3
 80015ec:	e122      	b.n	8001834 <HAL_RCC_OscConfig+0x7bc>
 80015ee:	bf00      	nop
 80015f0:	40021000 	.word	0x40021000
 80015f4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80015f8:	4b90      	ldr	r3, [pc, #576]	; (800183c <HAL_RCC_OscConfig+0x7c4>)
 80015fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015fe:	f003 0302 	and.w	r3, r3, #2
 8001602:	2b00      	cmp	r3, #0
 8001604:	d1e8      	bne.n	80015d8 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001606:	7ffb      	ldrb	r3, [r7, #31]
 8001608:	2b01      	cmp	r3, #1
 800160a:	d105      	bne.n	8001618 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800160c:	4b8b      	ldr	r3, [pc, #556]	; (800183c <HAL_RCC_OscConfig+0x7c4>)
 800160e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001610:	4a8a      	ldr	r2, [pc, #552]	; (800183c <HAL_RCC_OscConfig+0x7c4>)
 8001612:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001616:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800161c:	2b00      	cmp	r3, #0
 800161e:	f000 8108 	beq.w	8001832 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001626:	2b02      	cmp	r3, #2
 8001628:	f040 80d0 	bne.w	80017cc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800162c:	4b83      	ldr	r3, [pc, #524]	; (800183c <HAL_RCC_OscConfig+0x7c4>)
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	f003 0203 	and.w	r2, r3, #3
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800163c:	429a      	cmp	r2, r3
 800163e:	d130      	bne.n	80016a2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164a:	3b01      	subs	r3, #1
 800164c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800164e:	429a      	cmp	r2, r3
 8001650:	d127      	bne.n	80016a2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800165c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800165e:	429a      	cmp	r2, r3
 8001660:	d11f      	bne.n	80016a2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001668:	687a      	ldr	r2, [r7, #4]
 800166a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800166c:	2a07      	cmp	r2, #7
 800166e:	bf14      	ite	ne
 8001670:	2201      	movne	r2, #1
 8001672:	2200      	moveq	r2, #0
 8001674:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001676:	4293      	cmp	r3, r2
 8001678:	d113      	bne.n	80016a2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001684:	085b      	lsrs	r3, r3, #1
 8001686:	3b01      	subs	r3, #1
 8001688:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800168a:	429a      	cmp	r2, r3
 800168c:	d109      	bne.n	80016a2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001698:	085b      	lsrs	r3, r3, #1
 800169a:	3b01      	subs	r3, #1
 800169c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800169e:	429a      	cmp	r2, r3
 80016a0:	d06e      	beq.n	8001780 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80016a2:	69bb      	ldr	r3, [r7, #24]
 80016a4:	2b0c      	cmp	r3, #12
 80016a6:	d069      	beq.n	800177c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80016a8:	4b64      	ldr	r3, [pc, #400]	; (800183c <HAL_RCC_OscConfig+0x7c4>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d105      	bne.n	80016c0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80016b4:	4b61      	ldr	r3, [pc, #388]	; (800183c <HAL_RCC_OscConfig+0x7c4>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d001      	beq.n	80016c4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80016c0:	2301      	movs	r3, #1
 80016c2:	e0b7      	b.n	8001834 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80016c4:	4b5d      	ldr	r3, [pc, #372]	; (800183c <HAL_RCC_OscConfig+0x7c4>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a5c      	ldr	r2, [pc, #368]	; (800183c <HAL_RCC_OscConfig+0x7c4>)
 80016ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80016ce:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80016d0:	f7ff f98a 	bl	80009e8 <HAL_GetTick>
 80016d4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016d6:	e008      	b.n	80016ea <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016d8:	f7ff f986 	bl	80009e8 <HAL_GetTick>
 80016dc:	4602      	mov	r2, r0
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	2b02      	cmp	r3, #2
 80016e4:	d901      	bls.n	80016ea <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80016e6:	2303      	movs	r3, #3
 80016e8:	e0a4      	b.n	8001834 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016ea:	4b54      	ldr	r3, [pc, #336]	; (800183c <HAL_RCC_OscConfig+0x7c4>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d1f0      	bne.n	80016d8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016f6:	4b51      	ldr	r3, [pc, #324]	; (800183c <HAL_RCC_OscConfig+0x7c4>)
 80016f8:	68da      	ldr	r2, [r3, #12]
 80016fa:	4b51      	ldr	r3, [pc, #324]	; (8001840 <HAL_RCC_OscConfig+0x7c8>)
 80016fc:	4013      	ands	r3, r2
 80016fe:	687a      	ldr	r2, [r7, #4]
 8001700:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001702:	687a      	ldr	r2, [r7, #4]
 8001704:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001706:	3a01      	subs	r2, #1
 8001708:	0112      	lsls	r2, r2, #4
 800170a:	4311      	orrs	r1, r2
 800170c:	687a      	ldr	r2, [r7, #4]
 800170e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001710:	0212      	lsls	r2, r2, #8
 8001712:	4311      	orrs	r1, r2
 8001714:	687a      	ldr	r2, [r7, #4]
 8001716:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001718:	0852      	lsrs	r2, r2, #1
 800171a:	3a01      	subs	r2, #1
 800171c:	0552      	lsls	r2, r2, #21
 800171e:	4311      	orrs	r1, r2
 8001720:	687a      	ldr	r2, [r7, #4]
 8001722:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001724:	0852      	lsrs	r2, r2, #1
 8001726:	3a01      	subs	r2, #1
 8001728:	0652      	lsls	r2, r2, #25
 800172a:	4311      	orrs	r1, r2
 800172c:	687a      	ldr	r2, [r7, #4]
 800172e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001730:	0912      	lsrs	r2, r2, #4
 8001732:	0452      	lsls	r2, r2, #17
 8001734:	430a      	orrs	r2, r1
 8001736:	4941      	ldr	r1, [pc, #260]	; (800183c <HAL_RCC_OscConfig+0x7c4>)
 8001738:	4313      	orrs	r3, r2
 800173a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800173c:	4b3f      	ldr	r3, [pc, #252]	; (800183c <HAL_RCC_OscConfig+0x7c4>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a3e      	ldr	r2, [pc, #248]	; (800183c <HAL_RCC_OscConfig+0x7c4>)
 8001742:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001746:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001748:	4b3c      	ldr	r3, [pc, #240]	; (800183c <HAL_RCC_OscConfig+0x7c4>)
 800174a:	68db      	ldr	r3, [r3, #12]
 800174c:	4a3b      	ldr	r2, [pc, #236]	; (800183c <HAL_RCC_OscConfig+0x7c4>)
 800174e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001752:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001754:	f7ff f948 	bl	80009e8 <HAL_GetTick>
 8001758:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800175a:	e008      	b.n	800176e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800175c:	f7ff f944 	bl	80009e8 <HAL_GetTick>
 8001760:	4602      	mov	r2, r0
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	2b02      	cmp	r3, #2
 8001768:	d901      	bls.n	800176e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800176a:	2303      	movs	r3, #3
 800176c:	e062      	b.n	8001834 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800176e:	4b33      	ldr	r3, [pc, #204]	; (800183c <HAL_RCC_OscConfig+0x7c4>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001776:	2b00      	cmp	r3, #0
 8001778:	d0f0      	beq.n	800175c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800177a:	e05a      	b.n	8001832 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	e059      	b.n	8001834 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001780:	4b2e      	ldr	r3, [pc, #184]	; (800183c <HAL_RCC_OscConfig+0x7c4>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001788:	2b00      	cmp	r3, #0
 800178a:	d152      	bne.n	8001832 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800178c:	4b2b      	ldr	r3, [pc, #172]	; (800183c <HAL_RCC_OscConfig+0x7c4>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a2a      	ldr	r2, [pc, #168]	; (800183c <HAL_RCC_OscConfig+0x7c4>)
 8001792:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001796:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001798:	4b28      	ldr	r3, [pc, #160]	; (800183c <HAL_RCC_OscConfig+0x7c4>)
 800179a:	68db      	ldr	r3, [r3, #12]
 800179c:	4a27      	ldr	r2, [pc, #156]	; (800183c <HAL_RCC_OscConfig+0x7c4>)
 800179e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017a2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80017a4:	f7ff f920 	bl	80009e8 <HAL_GetTick>
 80017a8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017aa:	e008      	b.n	80017be <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017ac:	f7ff f91c 	bl	80009e8 <HAL_GetTick>
 80017b0:	4602      	mov	r2, r0
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	2b02      	cmp	r3, #2
 80017b8:	d901      	bls.n	80017be <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80017ba:	2303      	movs	r3, #3
 80017bc:	e03a      	b.n	8001834 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017be:	4b1f      	ldr	r3, [pc, #124]	; (800183c <HAL_RCC_OscConfig+0x7c4>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d0f0      	beq.n	80017ac <HAL_RCC_OscConfig+0x734>
 80017ca:	e032      	b.n	8001832 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80017cc:	69bb      	ldr	r3, [r7, #24]
 80017ce:	2b0c      	cmp	r3, #12
 80017d0:	d02d      	beq.n	800182e <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017d2:	4b1a      	ldr	r3, [pc, #104]	; (800183c <HAL_RCC_OscConfig+0x7c4>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a19      	ldr	r2, [pc, #100]	; (800183c <HAL_RCC_OscConfig+0x7c4>)
 80017d8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80017dc:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80017de:	4b17      	ldr	r3, [pc, #92]	; (800183c <HAL_RCC_OscConfig+0x7c4>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d105      	bne.n	80017f6 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80017ea:	4b14      	ldr	r3, [pc, #80]	; (800183c <HAL_RCC_OscConfig+0x7c4>)
 80017ec:	68db      	ldr	r3, [r3, #12]
 80017ee:	4a13      	ldr	r2, [pc, #76]	; (800183c <HAL_RCC_OscConfig+0x7c4>)
 80017f0:	f023 0303 	bic.w	r3, r3, #3
 80017f4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80017f6:	4b11      	ldr	r3, [pc, #68]	; (800183c <HAL_RCC_OscConfig+0x7c4>)
 80017f8:	68db      	ldr	r3, [r3, #12]
 80017fa:	4a10      	ldr	r2, [pc, #64]	; (800183c <HAL_RCC_OscConfig+0x7c4>)
 80017fc:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001800:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001804:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001806:	f7ff f8ef 	bl	80009e8 <HAL_GetTick>
 800180a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800180c:	e008      	b.n	8001820 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800180e:	f7ff f8eb 	bl	80009e8 <HAL_GetTick>
 8001812:	4602      	mov	r2, r0
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	1ad3      	subs	r3, r2, r3
 8001818:	2b02      	cmp	r3, #2
 800181a:	d901      	bls.n	8001820 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 800181c:	2303      	movs	r3, #3
 800181e:	e009      	b.n	8001834 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001820:	4b06      	ldr	r3, [pc, #24]	; (800183c <HAL_RCC_OscConfig+0x7c4>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001828:	2b00      	cmp	r3, #0
 800182a:	d1f0      	bne.n	800180e <HAL_RCC_OscConfig+0x796>
 800182c:	e001      	b.n	8001832 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e000      	b.n	8001834 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8001832:	2300      	movs	r3, #0
}
 8001834:	4618      	mov	r0, r3
 8001836:	3720      	adds	r7, #32
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	40021000 	.word	0x40021000
 8001840:	f99d808c 	.word	0xf99d808c

08001844 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b084      	sub	sp, #16
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
 800184c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d101      	bne.n	8001858 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001854:	2301      	movs	r3, #1
 8001856:	e0c8      	b.n	80019ea <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001858:	4b66      	ldr	r3, [pc, #408]	; (80019f4 <HAL_RCC_ClockConfig+0x1b0>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f003 0307 	and.w	r3, r3, #7
 8001860:	683a      	ldr	r2, [r7, #0]
 8001862:	429a      	cmp	r2, r3
 8001864:	d910      	bls.n	8001888 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001866:	4b63      	ldr	r3, [pc, #396]	; (80019f4 <HAL_RCC_ClockConfig+0x1b0>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f023 0207 	bic.w	r2, r3, #7
 800186e:	4961      	ldr	r1, [pc, #388]	; (80019f4 <HAL_RCC_ClockConfig+0x1b0>)
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	4313      	orrs	r3, r2
 8001874:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001876:	4b5f      	ldr	r3, [pc, #380]	; (80019f4 <HAL_RCC_ClockConfig+0x1b0>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 0307 	and.w	r3, r3, #7
 800187e:	683a      	ldr	r2, [r7, #0]
 8001880:	429a      	cmp	r2, r3
 8001882:	d001      	beq.n	8001888 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001884:	2301      	movs	r3, #1
 8001886:	e0b0      	b.n	80019ea <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f003 0301 	and.w	r3, r3, #1
 8001890:	2b00      	cmp	r3, #0
 8001892:	d04c      	beq.n	800192e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	2b03      	cmp	r3, #3
 800189a:	d107      	bne.n	80018ac <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800189c:	4b56      	ldr	r3, [pc, #344]	; (80019f8 <HAL_RCC_ClockConfig+0x1b4>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d121      	bne.n	80018ec <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	e09e      	b.n	80019ea <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	2b02      	cmp	r3, #2
 80018b2:	d107      	bne.n	80018c4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018b4:	4b50      	ldr	r3, [pc, #320]	; (80019f8 <HAL_RCC_ClockConfig+0x1b4>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d115      	bne.n	80018ec <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	e092      	b.n	80019ea <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d107      	bne.n	80018dc <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80018cc:	4b4a      	ldr	r3, [pc, #296]	; (80019f8 <HAL_RCC_ClockConfig+0x1b4>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f003 0302 	and.w	r3, r3, #2
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d109      	bne.n	80018ec <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80018d8:	2301      	movs	r3, #1
 80018da:	e086      	b.n	80019ea <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018dc:	4b46      	ldr	r3, [pc, #280]	; (80019f8 <HAL_RCC_ClockConfig+0x1b4>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d101      	bne.n	80018ec <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80018e8:	2301      	movs	r3, #1
 80018ea:	e07e      	b.n	80019ea <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80018ec:	4b42      	ldr	r3, [pc, #264]	; (80019f8 <HAL_RCC_ClockConfig+0x1b4>)
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	f023 0203 	bic.w	r2, r3, #3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	493f      	ldr	r1, [pc, #252]	; (80019f8 <HAL_RCC_ClockConfig+0x1b4>)
 80018fa:	4313      	orrs	r3, r2
 80018fc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80018fe:	f7ff f873 	bl	80009e8 <HAL_GetTick>
 8001902:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001904:	e00a      	b.n	800191c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001906:	f7ff f86f 	bl	80009e8 <HAL_GetTick>
 800190a:	4602      	mov	r2, r0
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	1ad3      	subs	r3, r2, r3
 8001910:	f241 3288 	movw	r2, #5000	; 0x1388
 8001914:	4293      	cmp	r3, r2
 8001916:	d901      	bls.n	800191c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001918:	2303      	movs	r3, #3
 800191a:	e066      	b.n	80019ea <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800191c:	4b36      	ldr	r3, [pc, #216]	; (80019f8 <HAL_RCC_ClockConfig+0x1b4>)
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	f003 020c 	and.w	r2, r3, #12
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	009b      	lsls	r3, r3, #2
 800192a:	429a      	cmp	r2, r3
 800192c:	d1eb      	bne.n	8001906 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f003 0302 	and.w	r3, r3, #2
 8001936:	2b00      	cmp	r3, #0
 8001938:	d008      	beq.n	800194c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800193a:	4b2f      	ldr	r3, [pc, #188]	; (80019f8 <HAL_RCC_ClockConfig+0x1b4>)
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	492c      	ldr	r1, [pc, #176]	; (80019f8 <HAL_RCC_ClockConfig+0x1b4>)
 8001948:	4313      	orrs	r3, r2
 800194a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800194c:	4b29      	ldr	r3, [pc, #164]	; (80019f4 <HAL_RCC_ClockConfig+0x1b0>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f003 0307 	and.w	r3, r3, #7
 8001954:	683a      	ldr	r2, [r7, #0]
 8001956:	429a      	cmp	r2, r3
 8001958:	d210      	bcs.n	800197c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800195a:	4b26      	ldr	r3, [pc, #152]	; (80019f4 <HAL_RCC_ClockConfig+0x1b0>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f023 0207 	bic.w	r2, r3, #7
 8001962:	4924      	ldr	r1, [pc, #144]	; (80019f4 <HAL_RCC_ClockConfig+0x1b0>)
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	4313      	orrs	r3, r2
 8001968:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800196a:	4b22      	ldr	r3, [pc, #136]	; (80019f4 <HAL_RCC_ClockConfig+0x1b0>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 0307 	and.w	r3, r3, #7
 8001972:	683a      	ldr	r2, [r7, #0]
 8001974:	429a      	cmp	r2, r3
 8001976:	d001      	beq.n	800197c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001978:	2301      	movs	r3, #1
 800197a:	e036      	b.n	80019ea <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f003 0304 	and.w	r3, r3, #4
 8001984:	2b00      	cmp	r3, #0
 8001986:	d008      	beq.n	800199a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001988:	4b1b      	ldr	r3, [pc, #108]	; (80019f8 <HAL_RCC_ClockConfig+0x1b4>)
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	68db      	ldr	r3, [r3, #12]
 8001994:	4918      	ldr	r1, [pc, #96]	; (80019f8 <HAL_RCC_ClockConfig+0x1b4>)
 8001996:	4313      	orrs	r3, r2
 8001998:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 0308 	and.w	r3, r3, #8
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d009      	beq.n	80019ba <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019a6:	4b14      	ldr	r3, [pc, #80]	; (80019f8 <HAL_RCC_ClockConfig+0x1b4>)
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	691b      	ldr	r3, [r3, #16]
 80019b2:	00db      	lsls	r3, r3, #3
 80019b4:	4910      	ldr	r1, [pc, #64]	; (80019f8 <HAL_RCC_ClockConfig+0x1b4>)
 80019b6:	4313      	orrs	r3, r2
 80019b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80019ba:	f000 f825 	bl	8001a08 <HAL_RCC_GetSysClockFreq>
 80019be:	4601      	mov	r1, r0
 80019c0:	4b0d      	ldr	r3, [pc, #52]	; (80019f8 <HAL_RCC_ClockConfig+0x1b4>)
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	091b      	lsrs	r3, r3, #4
 80019c6:	f003 030f 	and.w	r3, r3, #15
 80019ca:	4a0c      	ldr	r2, [pc, #48]	; (80019fc <HAL_RCC_ClockConfig+0x1b8>)
 80019cc:	5cd3      	ldrb	r3, [r2, r3]
 80019ce:	f003 031f 	and.w	r3, r3, #31
 80019d2:	fa21 f303 	lsr.w	r3, r1, r3
 80019d6:	4a0a      	ldr	r2, [pc, #40]	; (8001a00 <HAL_RCC_ClockConfig+0x1bc>)
 80019d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80019da:	4b0a      	ldr	r3, [pc, #40]	; (8001a04 <HAL_RCC_ClockConfig+0x1c0>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4618      	mov	r0, r3
 80019e0:	f7fe ffb6 	bl	8000950 <HAL_InitTick>
 80019e4:	4603      	mov	r3, r0
 80019e6:	72fb      	strb	r3, [r7, #11]

  return status;
 80019e8:	7afb      	ldrb	r3, [r7, #11]
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3710      	adds	r7, #16
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	40022000 	.word	0x40022000
 80019f8:	40021000 	.word	0x40021000
 80019fc:	08003154 	.word	0x08003154
 8001a00:	2000000c 	.word	0x2000000c
 8001a04:	20000010 	.word	0x20000010

08001a08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b089      	sub	sp, #36	; 0x24
 8001a0c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	61fb      	str	r3, [r7, #28]
 8001a12:	2300      	movs	r3, #0
 8001a14:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a16:	4b3d      	ldr	r3, [pc, #244]	; (8001b0c <HAL_RCC_GetSysClockFreq+0x104>)
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	f003 030c 	and.w	r3, r3, #12
 8001a1e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a20:	4b3a      	ldr	r3, [pc, #232]	; (8001b0c <HAL_RCC_GetSysClockFreq+0x104>)
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	f003 0303 	and.w	r3, r3, #3
 8001a28:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d005      	beq.n	8001a3c <HAL_RCC_GetSysClockFreq+0x34>
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	2b0c      	cmp	r3, #12
 8001a34:	d121      	bne.n	8001a7a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d11e      	bne.n	8001a7a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001a3c:	4b33      	ldr	r3, [pc, #204]	; (8001b0c <HAL_RCC_GetSysClockFreq+0x104>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 0308 	and.w	r3, r3, #8
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d107      	bne.n	8001a58 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001a48:	4b30      	ldr	r3, [pc, #192]	; (8001b0c <HAL_RCC_GetSysClockFreq+0x104>)
 8001a4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a4e:	0a1b      	lsrs	r3, r3, #8
 8001a50:	f003 030f 	and.w	r3, r3, #15
 8001a54:	61fb      	str	r3, [r7, #28]
 8001a56:	e005      	b.n	8001a64 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001a58:	4b2c      	ldr	r3, [pc, #176]	; (8001b0c <HAL_RCC_GetSysClockFreq+0x104>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	091b      	lsrs	r3, r3, #4
 8001a5e:	f003 030f 	and.w	r3, r3, #15
 8001a62:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001a64:	4a2a      	ldr	r2, [pc, #168]	; (8001b10 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a6c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d10d      	bne.n	8001a90 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001a74:	69fb      	ldr	r3, [r7, #28]
 8001a76:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a78:	e00a      	b.n	8001a90 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	2b04      	cmp	r3, #4
 8001a7e:	d102      	bne.n	8001a86 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001a80:	4b24      	ldr	r3, [pc, #144]	; (8001b14 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001a82:	61bb      	str	r3, [r7, #24]
 8001a84:	e004      	b.n	8001a90 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	2b08      	cmp	r3, #8
 8001a8a:	d101      	bne.n	8001a90 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001a8c:	4b22      	ldr	r3, [pc, #136]	; (8001b18 <HAL_RCC_GetSysClockFreq+0x110>)
 8001a8e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	2b0c      	cmp	r3, #12
 8001a94:	d133      	bne.n	8001afe <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001a96:	4b1d      	ldr	r3, [pc, #116]	; (8001b0c <HAL_RCC_GetSysClockFreq+0x104>)
 8001a98:	68db      	ldr	r3, [r3, #12]
 8001a9a:	f003 0303 	and.w	r3, r3, #3
 8001a9e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	2b02      	cmp	r3, #2
 8001aa4:	d002      	beq.n	8001aac <HAL_RCC_GetSysClockFreq+0xa4>
 8001aa6:	2b03      	cmp	r3, #3
 8001aa8:	d003      	beq.n	8001ab2 <HAL_RCC_GetSysClockFreq+0xaa>
 8001aaa:	e005      	b.n	8001ab8 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001aac:	4b19      	ldr	r3, [pc, #100]	; (8001b14 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001aae:	617b      	str	r3, [r7, #20]
      break;
 8001ab0:	e005      	b.n	8001abe <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001ab2:	4b19      	ldr	r3, [pc, #100]	; (8001b18 <HAL_RCC_GetSysClockFreq+0x110>)
 8001ab4:	617b      	str	r3, [r7, #20]
      break;
 8001ab6:	e002      	b.n	8001abe <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001ab8:	69fb      	ldr	r3, [r7, #28]
 8001aba:	617b      	str	r3, [r7, #20]
      break;
 8001abc:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001abe:	4b13      	ldr	r3, [pc, #76]	; (8001b0c <HAL_RCC_GetSysClockFreq+0x104>)
 8001ac0:	68db      	ldr	r3, [r3, #12]
 8001ac2:	091b      	lsrs	r3, r3, #4
 8001ac4:	f003 0307 	and.w	r3, r3, #7
 8001ac8:	3301      	adds	r3, #1
 8001aca:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001acc:	4b0f      	ldr	r3, [pc, #60]	; (8001b0c <HAL_RCC_GetSysClockFreq+0x104>)
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	0a1b      	lsrs	r3, r3, #8
 8001ad2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ad6:	697a      	ldr	r2, [r7, #20]
 8001ad8:	fb02 f203 	mul.w	r2, r2, r3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ae2:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001ae4:	4b09      	ldr	r3, [pc, #36]	; (8001b0c <HAL_RCC_GetSysClockFreq+0x104>)
 8001ae6:	68db      	ldr	r3, [r3, #12]
 8001ae8:	0e5b      	lsrs	r3, r3, #25
 8001aea:	f003 0303 	and.w	r3, r3, #3
 8001aee:	3301      	adds	r3, #1
 8001af0:	005b      	lsls	r3, r3, #1
 8001af2:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001af4:	697a      	ldr	r2, [r7, #20]
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001afc:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001afe:	69bb      	ldr	r3, [r7, #24]
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	3724      	adds	r7, #36	; 0x24
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr
 8001b0c:	40021000 	.word	0x40021000
 8001b10:	08003164 	.word	0x08003164
 8001b14:	00f42400 	.word	0x00f42400
 8001b18:	007a1200 	.word	0x007a1200

08001b1c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b086      	sub	sp, #24
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001b24:	2300      	movs	r3, #0
 8001b26:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001b28:	4b2a      	ldr	r3, [pc, #168]	; (8001bd4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d003      	beq.n	8001b3c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001b34:	f7ff fa3c 	bl	8000fb0 <HAL_PWREx_GetVoltageRange>
 8001b38:	6178      	str	r0, [r7, #20]
 8001b3a:	e014      	b.n	8001b66 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001b3c:	4b25      	ldr	r3, [pc, #148]	; (8001bd4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b40:	4a24      	ldr	r2, [pc, #144]	; (8001bd4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b46:	6593      	str	r3, [r2, #88]	; 0x58
 8001b48:	4b22      	ldr	r3, [pc, #136]	; (8001bd4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b50:	60fb      	str	r3, [r7, #12]
 8001b52:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001b54:	f7ff fa2c 	bl	8000fb0 <HAL_PWREx_GetVoltageRange>
 8001b58:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001b5a:	4b1e      	ldr	r3, [pc, #120]	; (8001bd4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b5e:	4a1d      	ldr	r2, [pc, #116]	; (8001bd4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b64:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b6c:	d10b      	bne.n	8001b86 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2b80      	cmp	r3, #128	; 0x80
 8001b72:	d919      	bls.n	8001ba8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2ba0      	cmp	r3, #160	; 0xa0
 8001b78:	d902      	bls.n	8001b80 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001b7a:	2302      	movs	r3, #2
 8001b7c:	613b      	str	r3, [r7, #16]
 8001b7e:	e013      	b.n	8001ba8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001b80:	2301      	movs	r3, #1
 8001b82:	613b      	str	r3, [r7, #16]
 8001b84:	e010      	b.n	8001ba8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2b80      	cmp	r3, #128	; 0x80
 8001b8a:	d902      	bls.n	8001b92 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001b8c:	2303      	movs	r3, #3
 8001b8e:	613b      	str	r3, [r7, #16]
 8001b90:	e00a      	b.n	8001ba8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2b80      	cmp	r3, #128	; 0x80
 8001b96:	d102      	bne.n	8001b9e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001b98:	2302      	movs	r3, #2
 8001b9a:	613b      	str	r3, [r7, #16]
 8001b9c:	e004      	b.n	8001ba8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2b70      	cmp	r3, #112	; 0x70
 8001ba2:	d101      	bne.n	8001ba8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001ba8:	4b0b      	ldr	r3, [pc, #44]	; (8001bd8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f023 0207 	bic.w	r2, r3, #7
 8001bb0:	4909      	ldr	r1, [pc, #36]	; (8001bd8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001bb8:	4b07      	ldr	r3, [pc, #28]	; (8001bd8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 0307 	and.w	r3, r3, #7
 8001bc0:	693a      	ldr	r2, [r7, #16]
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	d001      	beq.n	8001bca <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e000      	b.n	8001bcc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001bca:	2300      	movs	r3, #0
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	3718      	adds	r7, #24
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	40021000 	.word	0x40021000
 8001bd8:	40022000 	.word	0x40022000

08001bdc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b085      	sub	sp, #20
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	4603      	mov	r3, r0
 8001be4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001be6:	2300      	movs	r3, #0
 8001be8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8001bea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001bee:	2b84      	cmp	r3, #132	; 0x84
 8001bf0:	d005      	beq.n	8001bfe <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8001bf2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	4413      	add	r3, r2
 8001bfa:	3303      	adds	r3, #3
 8001bfc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	3714      	adds	r7, #20
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr

08001c0c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8001c10:	f000 fada 	bl	80021c8 <vTaskStartScheduler>
  
  return osOK;
 8001c14:	2300      	movs	r3, #0
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	bd80      	pop	{r7, pc}

08001c1a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001c1a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c1c:	b089      	sub	sp, #36	; 0x24
 8001c1e:	af04      	add	r7, sp, #16
 8001c20:	6078      	str	r0, [r7, #4]
 8001c22:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	695b      	ldr	r3, [r3, #20]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d020      	beq.n	8001c6e <osThreadCreate+0x54>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	699b      	ldr	r3, [r3, #24]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d01c      	beq.n	8001c6e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	685c      	ldr	r4, [r3, #4]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681d      	ldr	r5, [r3, #0]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	691e      	ldr	r6, [r3, #16]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001c46:	4618      	mov	r0, r3
 8001c48:	f7ff ffc8 	bl	8001bdc <makeFreeRtosPriority>
 8001c4c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	695b      	ldr	r3, [r3, #20]
 8001c52:	687a      	ldr	r2, [r7, #4]
 8001c54:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001c56:	9202      	str	r2, [sp, #8]
 8001c58:	9301      	str	r3, [sp, #4]
 8001c5a:	9100      	str	r1, [sp, #0]
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	4632      	mov	r2, r6
 8001c60:	4629      	mov	r1, r5
 8001c62:	4620      	mov	r0, r4
 8001c64:	f000 f8ed 	bl	8001e42 <xTaskCreateStatic>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	60fb      	str	r3, [r7, #12]
 8001c6c:	e01c      	b.n	8001ca8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	685c      	ldr	r4, [r3, #4]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001c7a:	b29e      	uxth	r6, r3
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001c82:	4618      	mov	r0, r3
 8001c84:	f7ff ffaa 	bl	8001bdc <makeFreeRtosPriority>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	f107 030c 	add.w	r3, r7, #12
 8001c8e:	9301      	str	r3, [sp, #4]
 8001c90:	9200      	str	r2, [sp, #0]
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	4632      	mov	r2, r6
 8001c96:	4629      	mov	r1, r5
 8001c98:	4620      	mov	r0, r4
 8001c9a:	f000 f92c 	bl	8001ef6 <xTaskCreate>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d001      	beq.n	8001ca8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	e000      	b.n	8001caa <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	3714      	adds	r7, #20
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001cb2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8001cb2:	b580      	push	{r7, lr}
 8001cb4:	b084      	sub	sp, #16
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d001      	beq.n	8001cc8 <osDelay+0x16>
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	e000      	b.n	8001cca <osDelay+0x18>
 8001cc8:	2301      	movs	r3, #1
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f000 fa48 	bl	8002160 <vTaskDelay>
  
  return osOK;
 8001cd0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3710      	adds	r7, #16
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}

08001cda <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001cda:	b480      	push	{r7}
 8001cdc:	b083      	sub	sp, #12
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	f103 0208 	add.w	r2, r3, #8
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	f04f 32ff 	mov.w	r2, #4294967295
 8001cf2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	f103 0208 	add.w	r2, r3, #8
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	f103 0208 	add.w	r2, r3, #8
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001d0e:	bf00      	nop
 8001d10:	370c      	adds	r7, #12
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr

08001d1a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001d1a:	b480      	push	{r7}
 8001d1c:	b083      	sub	sp, #12
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2200      	movs	r2, #0
 8001d26:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001d28:	bf00      	nop
 8001d2a:	370c      	adds	r7, #12
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr

08001d34 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001d34:	b480      	push	{r7}
 8001d36:	b085      	sub	sp, #20
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
 8001d3c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	68fa      	ldr	r2, [r7, #12]
 8001d48:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	689a      	ldr	r2, [r3, #8]
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	683a      	ldr	r2, [r7, #0]
 8001d58:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	683a      	ldr	r2, [r7, #0]
 8001d5e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	687a      	ldr	r2, [r7, #4]
 8001d64:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	1c5a      	adds	r2, r3, #1
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	601a      	str	r2, [r3, #0]
}
 8001d70:	bf00      	nop
 8001d72:	3714      	adds	r7, #20
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr

08001d7c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b085      	sub	sp, #20
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d92:	d103      	bne.n	8001d9c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	691b      	ldr	r3, [r3, #16]
 8001d98:	60fb      	str	r3, [r7, #12]
 8001d9a:	e00c      	b.n	8001db6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	3308      	adds	r3, #8
 8001da0:	60fb      	str	r3, [r7, #12]
 8001da2:	e002      	b.n	8001daa <vListInsert+0x2e>
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	60fb      	str	r3, [r7, #12]
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	68ba      	ldr	r2, [r7, #8]
 8001db2:	429a      	cmp	r2, r3
 8001db4:	d2f6      	bcs.n	8001da4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	685a      	ldr	r2, [r3, #4]
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	683a      	ldr	r2, [r7, #0]
 8001dc4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	68fa      	ldr	r2, [r7, #12]
 8001dca:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	683a      	ldr	r2, [r7, #0]
 8001dd0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	687a      	ldr	r2, [r7, #4]
 8001dd6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	1c5a      	adds	r2, r3, #1
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	601a      	str	r2, [r3, #0]
}
 8001de2:	bf00      	nop
 8001de4:	3714      	adds	r7, #20
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr

08001dee <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001dee:	b480      	push	{r7}
 8001df0:	b085      	sub	sp, #20
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	691b      	ldr	r3, [r3, #16]
 8001dfa:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	687a      	ldr	r2, [r7, #4]
 8001e02:	6892      	ldr	r2, [r2, #8]
 8001e04:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	687a      	ldr	r2, [r7, #4]
 8001e0c:	6852      	ldr	r2, [r2, #4]
 8001e0e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	687a      	ldr	r2, [r7, #4]
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d103      	bne.n	8001e22 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	689a      	ldr	r2, [r3, #8]
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2200      	movs	r2, #0
 8001e26:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	1e5a      	subs	r2, r3, #1
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3714      	adds	r7, #20
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr

08001e42 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8001e42:	b580      	push	{r7, lr}
 8001e44:	b08e      	sub	sp, #56	; 0x38
 8001e46:	af04      	add	r7, sp, #16
 8001e48:	60f8      	str	r0, [r7, #12]
 8001e4a:	60b9      	str	r1, [r7, #8]
 8001e4c:	607a      	str	r2, [r7, #4]
 8001e4e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8001e50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d109      	bne.n	8001e6a <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001e56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e5a:	f383 8811 	msr	BASEPRI, r3
 8001e5e:	f3bf 8f6f 	isb	sy
 8001e62:	f3bf 8f4f 	dsb	sy
 8001e66:	623b      	str	r3, [r7, #32]
 8001e68:	e7fe      	b.n	8001e68 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8001e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d109      	bne.n	8001e84 <xTaskCreateStatic+0x42>
 8001e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e74:	f383 8811 	msr	BASEPRI, r3
 8001e78:	f3bf 8f6f 	isb	sy
 8001e7c:	f3bf 8f4f 	dsb	sy
 8001e80:	61fb      	str	r3, [r7, #28]
 8001e82:	e7fe      	b.n	8001e82 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8001e84:	2354      	movs	r3, #84	; 0x54
 8001e86:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	2b54      	cmp	r3, #84	; 0x54
 8001e8c:	d009      	beq.n	8001ea2 <xTaskCreateStatic+0x60>
 8001e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e92:	f383 8811 	msr	BASEPRI, r3
 8001e96:	f3bf 8f6f 	isb	sy
 8001e9a:	f3bf 8f4f 	dsb	sy
 8001e9e:	61bb      	str	r3, [r7, #24]
 8001ea0:	e7fe      	b.n	8001ea0 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8001ea2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8001ea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d01e      	beq.n	8001ee8 <xTaskCreateStatic+0xa6>
 8001eaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d01b      	beq.n	8001ee8 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001eb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001eb2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8001eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001eb8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8001eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ebc:	2202      	movs	r2, #2
 8001ebe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	9303      	str	r3, [sp, #12]
 8001ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec8:	9302      	str	r3, [sp, #8]
 8001eca:	f107 0314 	add.w	r3, r7, #20
 8001ece:	9301      	str	r3, [sp, #4]
 8001ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ed2:	9300      	str	r3, [sp, #0]
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	687a      	ldr	r2, [r7, #4]
 8001ed8:	68b9      	ldr	r1, [r7, #8]
 8001eda:	68f8      	ldr	r0, [r7, #12]
 8001edc:	f000 f850 	bl	8001f80 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001ee0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001ee2:	f000 f8d3 	bl	800208c <prvAddNewTaskToReadyList>
 8001ee6:	e001      	b.n	8001eec <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8001eec:	697b      	ldr	r3, [r7, #20]
	}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3728      	adds	r7, #40	; 0x28
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}

08001ef6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8001ef6:	b580      	push	{r7, lr}
 8001ef8:	b08c      	sub	sp, #48	; 0x30
 8001efa:	af04      	add	r7, sp, #16
 8001efc:	60f8      	str	r0, [r7, #12]
 8001efe:	60b9      	str	r1, [r7, #8]
 8001f00:	603b      	str	r3, [r7, #0]
 8001f02:	4613      	mov	r3, r2
 8001f04:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001f06:	88fb      	ldrh	r3, [r7, #6]
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f000 fed2 	bl	8002cb4 <pvPortMalloc>
 8001f10:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d00e      	beq.n	8001f36 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001f18:	2054      	movs	r0, #84	; 0x54
 8001f1a:	f000 fecb 	bl	8002cb4 <pvPortMalloc>
 8001f1e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8001f20:	69fb      	ldr	r3, [r7, #28]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d003      	beq.n	8001f2e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	697a      	ldr	r2, [r7, #20]
 8001f2a:	631a      	str	r2, [r3, #48]	; 0x30
 8001f2c:	e005      	b.n	8001f3a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8001f2e:	6978      	ldr	r0, [r7, #20]
 8001f30:	f000 ff82 	bl	8002e38 <vPortFree>
 8001f34:	e001      	b.n	8001f3a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8001f36:	2300      	movs	r3, #0
 8001f38:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d017      	beq.n	8001f70 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8001f40:	69fb      	ldr	r3, [r7, #28]
 8001f42:	2200      	movs	r2, #0
 8001f44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001f48:	88fa      	ldrh	r2, [r7, #6]
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	9303      	str	r3, [sp, #12]
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	9302      	str	r3, [sp, #8]
 8001f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f54:	9301      	str	r3, [sp, #4]
 8001f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f58:	9300      	str	r3, [sp, #0]
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	68b9      	ldr	r1, [r7, #8]
 8001f5e:	68f8      	ldr	r0, [r7, #12]
 8001f60:	f000 f80e 	bl	8001f80 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001f64:	69f8      	ldr	r0, [r7, #28]
 8001f66:	f000 f891 	bl	800208c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	61bb      	str	r3, [r7, #24]
 8001f6e:	e002      	b.n	8001f76 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001f70:	f04f 33ff 	mov.w	r3, #4294967295
 8001f74:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8001f76:	69bb      	ldr	r3, [r7, #24]
	}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3720      	adds	r7, #32
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}

08001f80 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b088      	sub	sp, #32
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	60f8      	str	r0, [r7, #12]
 8001f88:	60b9      	str	r1, [r7, #8]
 8001f8a:	607a      	str	r2, [r7, #4]
 8001f8c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001f98:	3b01      	subs	r3, #1
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	4413      	add	r3, r2
 8001f9e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8001fa0:	69bb      	ldr	r3, [r7, #24]
 8001fa2:	f023 0307 	bic.w	r3, r3, #7
 8001fa6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001fa8:	69bb      	ldr	r3, [r7, #24]
 8001faa:	f003 0307 	and.w	r3, r3, #7
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d009      	beq.n	8001fc6 <prvInitialiseNewTask+0x46>
 8001fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fb6:	f383 8811 	msr	BASEPRI, r3
 8001fba:	f3bf 8f6f 	isb	sy
 8001fbe:	f3bf 8f4f 	dsb	sy
 8001fc2:	617b      	str	r3, [r7, #20]
 8001fc4:	e7fe      	b.n	8001fc4 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d01f      	beq.n	800200c <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001fcc:	2300      	movs	r3, #0
 8001fce:	61fb      	str	r3, [r7, #28]
 8001fd0:	e012      	b.n	8001ff8 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001fd2:	68ba      	ldr	r2, [r7, #8]
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	4413      	add	r3, r2
 8001fd8:	7819      	ldrb	r1, [r3, #0]
 8001fda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	4413      	add	r3, r2
 8001fe0:	3334      	adds	r3, #52	; 0x34
 8001fe2:	460a      	mov	r2, r1
 8001fe4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8001fe6:	68ba      	ldr	r2, [r7, #8]
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	4413      	add	r3, r2
 8001fec:	781b      	ldrb	r3, [r3, #0]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d006      	beq.n	8002000 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	3301      	adds	r3, #1
 8001ff6:	61fb      	str	r3, [r7, #28]
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	2b0f      	cmp	r3, #15
 8001ffc:	d9e9      	bls.n	8001fd2 <prvInitialiseNewTask+0x52>
 8001ffe:	e000      	b.n	8002002 <prvInitialiseNewTask+0x82>
			{
				break;
 8002000:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002004:	2200      	movs	r2, #0
 8002006:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800200a:	e003      	b.n	8002014 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800200c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800200e:	2200      	movs	r2, #0
 8002010:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002016:	2b06      	cmp	r3, #6
 8002018:	d901      	bls.n	800201e <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800201a:	2306      	movs	r3, #6
 800201c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800201e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002020:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002022:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002026:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002028:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800202a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800202c:	2200      	movs	r2, #0
 800202e:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002032:	3304      	adds	r3, #4
 8002034:	4618      	mov	r0, r3
 8002036:	f7ff fe70 	bl	8001d1a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800203a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800203c:	3318      	adds	r3, #24
 800203e:	4618      	mov	r0, r3
 8002040:	f7ff fe6b 	bl	8001d1a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002046:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002048:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800204a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800204c:	f1c3 0207 	rsb	r2, r3, #7
 8002050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002052:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002056:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002058:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800205a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800205c:	2200      	movs	r2, #0
 800205e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002062:	2200      	movs	r2, #0
 8002064:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002068:	683a      	ldr	r2, [r7, #0]
 800206a:	68f9      	ldr	r1, [r7, #12]
 800206c:	69b8      	ldr	r0, [r7, #24]
 800206e:	f000 fc1b 	bl	80028a8 <pxPortInitialiseStack>
 8002072:	4602      	mov	r2, r0
 8002074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002076:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800207a:	2b00      	cmp	r3, #0
 800207c:	d002      	beq.n	8002084 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800207e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002080:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002082:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002084:	bf00      	nop
 8002086:	3720      	adds	r7, #32
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}

0800208c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002094:	f000 fd32 	bl	8002afc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002098:	4b2a      	ldr	r3, [pc, #168]	; (8002144 <prvAddNewTaskToReadyList+0xb8>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	3301      	adds	r3, #1
 800209e:	4a29      	ldr	r2, [pc, #164]	; (8002144 <prvAddNewTaskToReadyList+0xb8>)
 80020a0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80020a2:	4b29      	ldr	r3, [pc, #164]	; (8002148 <prvAddNewTaskToReadyList+0xbc>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d109      	bne.n	80020be <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80020aa:	4a27      	ldr	r2, [pc, #156]	; (8002148 <prvAddNewTaskToReadyList+0xbc>)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80020b0:	4b24      	ldr	r3, [pc, #144]	; (8002144 <prvAddNewTaskToReadyList+0xb8>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d110      	bne.n	80020da <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80020b8:	f000 fab8 	bl	800262c <prvInitialiseTaskLists>
 80020bc:	e00d      	b.n	80020da <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80020be:	4b23      	ldr	r3, [pc, #140]	; (800214c <prvAddNewTaskToReadyList+0xc0>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d109      	bne.n	80020da <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80020c6:	4b20      	ldr	r3, [pc, #128]	; (8002148 <prvAddNewTaskToReadyList+0xbc>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d802      	bhi.n	80020da <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80020d4:	4a1c      	ldr	r2, [pc, #112]	; (8002148 <prvAddNewTaskToReadyList+0xbc>)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80020da:	4b1d      	ldr	r3, [pc, #116]	; (8002150 <prvAddNewTaskToReadyList+0xc4>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	3301      	adds	r3, #1
 80020e0:	4a1b      	ldr	r2, [pc, #108]	; (8002150 <prvAddNewTaskToReadyList+0xc4>)
 80020e2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020e8:	2201      	movs	r2, #1
 80020ea:	409a      	lsls	r2, r3
 80020ec:	4b19      	ldr	r3, [pc, #100]	; (8002154 <prvAddNewTaskToReadyList+0xc8>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4313      	orrs	r3, r2
 80020f2:	4a18      	ldr	r2, [pc, #96]	; (8002154 <prvAddNewTaskToReadyList+0xc8>)
 80020f4:	6013      	str	r3, [r2, #0]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020fa:	4613      	mov	r3, r2
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	4413      	add	r3, r2
 8002100:	009b      	lsls	r3, r3, #2
 8002102:	4a15      	ldr	r2, [pc, #84]	; (8002158 <prvAddNewTaskToReadyList+0xcc>)
 8002104:	441a      	add	r2, r3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	3304      	adds	r3, #4
 800210a:	4619      	mov	r1, r3
 800210c:	4610      	mov	r0, r2
 800210e:	f7ff fe11 	bl	8001d34 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002112:	f000 fd21 	bl	8002b58 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002116:	4b0d      	ldr	r3, [pc, #52]	; (800214c <prvAddNewTaskToReadyList+0xc0>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d00e      	beq.n	800213c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800211e:	4b0a      	ldr	r3, [pc, #40]	; (8002148 <prvAddNewTaskToReadyList+0xbc>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002128:	429a      	cmp	r2, r3
 800212a:	d207      	bcs.n	800213c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800212c:	4b0b      	ldr	r3, [pc, #44]	; (800215c <prvAddNewTaskToReadyList+0xd0>)
 800212e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002132:	601a      	str	r2, [r3, #0]
 8002134:	f3bf 8f4f 	dsb	sy
 8002138:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800213c:	bf00      	nop
 800213e:	3708      	adds	r7, #8
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}
 8002144:	200003a0 	.word	0x200003a0
 8002148:	200002a0 	.word	0x200002a0
 800214c:	200003ac 	.word	0x200003ac
 8002150:	200003bc 	.word	0x200003bc
 8002154:	200003a8 	.word	0x200003a8
 8002158:	200002a4 	.word	0x200002a4
 800215c:	e000ed04 	.word	0xe000ed04

08002160 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002160:	b580      	push	{r7, lr}
 8002162:	b084      	sub	sp, #16
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002168:	2300      	movs	r3, #0
 800216a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d016      	beq.n	80021a0 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002172:	4b13      	ldr	r3, [pc, #76]	; (80021c0 <vTaskDelay+0x60>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d009      	beq.n	800218e <vTaskDelay+0x2e>
 800217a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800217e:	f383 8811 	msr	BASEPRI, r3
 8002182:	f3bf 8f6f 	isb	sy
 8002186:	f3bf 8f4f 	dsb	sy
 800218a:	60bb      	str	r3, [r7, #8]
 800218c:	e7fe      	b.n	800218c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800218e:	f000 f879 	bl	8002284 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002192:	2100      	movs	r1, #0
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	f000 fb21 	bl	80027dc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800219a:	f000 f881 	bl	80022a0 <xTaskResumeAll>
 800219e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d107      	bne.n	80021b6 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80021a6:	4b07      	ldr	r3, [pc, #28]	; (80021c4 <vTaskDelay+0x64>)
 80021a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80021ac:	601a      	str	r2, [r3, #0]
 80021ae:	f3bf 8f4f 	dsb	sy
 80021b2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80021b6:	bf00      	nop
 80021b8:	3710      	adds	r7, #16
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	200003c8 	.word	0x200003c8
 80021c4:	e000ed04 	.word	0xe000ed04

080021c8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b08a      	sub	sp, #40	; 0x28
 80021cc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80021ce:	2300      	movs	r3, #0
 80021d0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80021d2:	2300      	movs	r3, #0
 80021d4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80021d6:	463a      	mov	r2, r7
 80021d8:	1d39      	adds	r1, r7, #4
 80021da:	f107 0308 	add.w	r3, r7, #8
 80021de:	4618      	mov	r0, r3
 80021e0:	f7fd fff8 	bl	80001d4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80021e4:	6839      	ldr	r1, [r7, #0]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	68ba      	ldr	r2, [r7, #8]
 80021ea:	9202      	str	r2, [sp, #8]
 80021ec:	9301      	str	r3, [sp, #4]
 80021ee:	2300      	movs	r3, #0
 80021f0:	9300      	str	r3, [sp, #0]
 80021f2:	2300      	movs	r3, #0
 80021f4:	460a      	mov	r2, r1
 80021f6:	491d      	ldr	r1, [pc, #116]	; (800226c <vTaskStartScheduler+0xa4>)
 80021f8:	481d      	ldr	r0, [pc, #116]	; (8002270 <vTaskStartScheduler+0xa8>)
 80021fa:	f7ff fe22 	bl	8001e42 <xTaskCreateStatic>
 80021fe:	4602      	mov	r2, r0
 8002200:	4b1c      	ldr	r3, [pc, #112]	; (8002274 <vTaskStartScheduler+0xac>)
 8002202:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002204:	4b1b      	ldr	r3, [pc, #108]	; (8002274 <vTaskStartScheduler+0xac>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d002      	beq.n	8002212 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800220c:	2301      	movs	r3, #1
 800220e:	617b      	str	r3, [r7, #20]
 8002210:	e001      	b.n	8002216 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002212:	2300      	movs	r3, #0
 8002214:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	2b01      	cmp	r3, #1
 800221a:	d115      	bne.n	8002248 <vTaskStartScheduler+0x80>
 800221c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002220:	f383 8811 	msr	BASEPRI, r3
 8002224:	f3bf 8f6f 	isb	sy
 8002228:	f3bf 8f4f 	dsb	sy
 800222c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800222e:	4b12      	ldr	r3, [pc, #72]	; (8002278 <vTaskStartScheduler+0xb0>)
 8002230:	f04f 32ff 	mov.w	r2, #4294967295
 8002234:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002236:	4b11      	ldr	r3, [pc, #68]	; (800227c <vTaskStartScheduler+0xb4>)
 8002238:	2201      	movs	r2, #1
 800223a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800223c:	4b10      	ldr	r3, [pc, #64]	; (8002280 <vTaskStartScheduler+0xb8>)
 800223e:	2200      	movs	r2, #0
 8002240:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002242:	f000 fbbd 	bl	80029c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002246:	e00d      	b.n	8002264 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800224e:	d109      	bne.n	8002264 <vTaskStartScheduler+0x9c>
 8002250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002254:	f383 8811 	msr	BASEPRI, r3
 8002258:	f3bf 8f6f 	isb	sy
 800225c:	f3bf 8f4f 	dsb	sy
 8002260:	60fb      	str	r3, [r7, #12]
 8002262:	e7fe      	b.n	8002262 <vTaskStartScheduler+0x9a>
}
 8002264:	bf00      	nop
 8002266:	3718      	adds	r7, #24
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}
 800226c:	0800314c 	.word	0x0800314c
 8002270:	080025fd 	.word	0x080025fd
 8002274:	200003c4 	.word	0x200003c4
 8002278:	200003c0 	.word	0x200003c0
 800227c:	200003ac 	.word	0x200003ac
 8002280:	200003a4 	.word	0x200003a4

08002284 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002284:	b480      	push	{r7}
 8002286:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002288:	4b04      	ldr	r3, [pc, #16]	; (800229c <vTaskSuspendAll+0x18>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	3301      	adds	r3, #1
 800228e:	4a03      	ldr	r2, [pc, #12]	; (800229c <vTaskSuspendAll+0x18>)
 8002290:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8002292:	bf00      	nop
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr
 800229c:	200003c8 	.word	0x200003c8

080022a0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b084      	sub	sp, #16
 80022a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80022a6:	2300      	movs	r3, #0
 80022a8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80022aa:	2300      	movs	r3, #0
 80022ac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80022ae:	4b41      	ldr	r3, [pc, #260]	; (80023b4 <xTaskResumeAll+0x114>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d109      	bne.n	80022ca <xTaskResumeAll+0x2a>
 80022b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022ba:	f383 8811 	msr	BASEPRI, r3
 80022be:	f3bf 8f6f 	isb	sy
 80022c2:	f3bf 8f4f 	dsb	sy
 80022c6:	603b      	str	r3, [r7, #0]
 80022c8:	e7fe      	b.n	80022c8 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80022ca:	f000 fc17 	bl	8002afc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80022ce:	4b39      	ldr	r3, [pc, #228]	; (80023b4 <xTaskResumeAll+0x114>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	3b01      	subs	r3, #1
 80022d4:	4a37      	ldr	r2, [pc, #220]	; (80023b4 <xTaskResumeAll+0x114>)
 80022d6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80022d8:	4b36      	ldr	r3, [pc, #216]	; (80023b4 <xTaskResumeAll+0x114>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d161      	bne.n	80023a4 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80022e0:	4b35      	ldr	r3, [pc, #212]	; (80023b8 <xTaskResumeAll+0x118>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d05d      	beq.n	80023a4 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80022e8:	e02e      	b.n	8002348 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80022ea:	4b34      	ldr	r3, [pc, #208]	; (80023bc <xTaskResumeAll+0x11c>)
 80022ec:	68db      	ldr	r3, [r3, #12]
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	3318      	adds	r3, #24
 80022f6:	4618      	mov	r0, r3
 80022f8:	f7ff fd79 	bl	8001dee <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	3304      	adds	r3, #4
 8002300:	4618      	mov	r0, r3
 8002302:	f7ff fd74 	bl	8001dee <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800230a:	2201      	movs	r2, #1
 800230c:	409a      	lsls	r2, r3
 800230e:	4b2c      	ldr	r3, [pc, #176]	; (80023c0 <xTaskResumeAll+0x120>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4313      	orrs	r3, r2
 8002314:	4a2a      	ldr	r2, [pc, #168]	; (80023c0 <xTaskResumeAll+0x120>)
 8002316:	6013      	str	r3, [r2, #0]
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800231c:	4613      	mov	r3, r2
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	4413      	add	r3, r2
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	4a27      	ldr	r2, [pc, #156]	; (80023c4 <xTaskResumeAll+0x124>)
 8002326:	441a      	add	r2, r3
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	3304      	adds	r3, #4
 800232c:	4619      	mov	r1, r3
 800232e:	4610      	mov	r0, r2
 8002330:	f7ff fd00 	bl	8001d34 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002338:	4b23      	ldr	r3, [pc, #140]	; (80023c8 <xTaskResumeAll+0x128>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800233e:	429a      	cmp	r2, r3
 8002340:	d302      	bcc.n	8002348 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8002342:	4b22      	ldr	r3, [pc, #136]	; (80023cc <xTaskResumeAll+0x12c>)
 8002344:	2201      	movs	r2, #1
 8002346:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002348:	4b1c      	ldr	r3, [pc, #112]	; (80023bc <xTaskResumeAll+0x11c>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d1cc      	bne.n	80022ea <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d001      	beq.n	800235a <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002356:	f000 fa03 	bl	8002760 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800235a:	4b1d      	ldr	r3, [pc, #116]	; (80023d0 <xTaskResumeAll+0x130>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d010      	beq.n	8002388 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002366:	f000 f837 	bl	80023d8 <xTaskIncrementTick>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d002      	beq.n	8002376 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8002370:	4b16      	ldr	r3, [pc, #88]	; (80023cc <xTaskResumeAll+0x12c>)
 8002372:	2201      	movs	r2, #1
 8002374:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	3b01      	subs	r3, #1
 800237a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d1f1      	bne.n	8002366 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8002382:	4b13      	ldr	r3, [pc, #76]	; (80023d0 <xTaskResumeAll+0x130>)
 8002384:	2200      	movs	r2, #0
 8002386:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002388:	4b10      	ldr	r3, [pc, #64]	; (80023cc <xTaskResumeAll+0x12c>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d009      	beq.n	80023a4 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002390:	2301      	movs	r3, #1
 8002392:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002394:	4b0f      	ldr	r3, [pc, #60]	; (80023d4 <xTaskResumeAll+0x134>)
 8002396:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800239a:	601a      	str	r2, [r3, #0]
 800239c:	f3bf 8f4f 	dsb	sy
 80023a0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80023a4:	f000 fbd8 	bl	8002b58 <vPortExitCritical>

	return xAlreadyYielded;
 80023a8:	68bb      	ldr	r3, [r7, #8]
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3710      	adds	r7, #16
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	200003c8 	.word	0x200003c8
 80023b8:	200003a0 	.word	0x200003a0
 80023bc:	20000360 	.word	0x20000360
 80023c0:	200003a8 	.word	0x200003a8
 80023c4:	200002a4 	.word	0x200002a4
 80023c8:	200002a0 	.word	0x200002a0
 80023cc:	200003b4 	.word	0x200003b4
 80023d0:	200003b0 	.word	0x200003b0
 80023d4:	e000ed04 	.word	0xe000ed04

080023d8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b086      	sub	sp, #24
 80023dc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80023de:	2300      	movs	r3, #0
 80023e0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80023e2:	4b4e      	ldr	r3, [pc, #312]	; (800251c <xTaskIncrementTick+0x144>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	f040 8087 	bne.w	80024fa <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80023ec:	4b4c      	ldr	r3, [pc, #304]	; (8002520 <xTaskIncrementTick+0x148>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	3301      	adds	r3, #1
 80023f2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80023f4:	4a4a      	ldr	r2, [pc, #296]	; (8002520 <xTaskIncrementTick+0x148>)
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d11f      	bne.n	8002440 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8002400:	4b48      	ldr	r3, [pc, #288]	; (8002524 <xTaskIncrementTick+0x14c>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d009      	beq.n	800241e <xTaskIncrementTick+0x46>
 800240a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800240e:	f383 8811 	msr	BASEPRI, r3
 8002412:	f3bf 8f6f 	isb	sy
 8002416:	f3bf 8f4f 	dsb	sy
 800241a:	603b      	str	r3, [r7, #0]
 800241c:	e7fe      	b.n	800241c <xTaskIncrementTick+0x44>
 800241e:	4b41      	ldr	r3, [pc, #260]	; (8002524 <xTaskIncrementTick+0x14c>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	60fb      	str	r3, [r7, #12]
 8002424:	4b40      	ldr	r3, [pc, #256]	; (8002528 <xTaskIncrementTick+0x150>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a3e      	ldr	r2, [pc, #248]	; (8002524 <xTaskIncrementTick+0x14c>)
 800242a:	6013      	str	r3, [r2, #0]
 800242c:	4a3e      	ldr	r2, [pc, #248]	; (8002528 <xTaskIncrementTick+0x150>)
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	6013      	str	r3, [r2, #0]
 8002432:	4b3e      	ldr	r3, [pc, #248]	; (800252c <xTaskIncrementTick+0x154>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	3301      	adds	r3, #1
 8002438:	4a3c      	ldr	r2, [pc, #240]	; (800252c <xTaskIncrementTick+0x154>)
 800243a:	6013      	str	r3, [r2, #0]
 800243c:	f000 f990 	bl	8002760 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002440:	4b3b      	ldr	r3, [pc, #236]	; (8002530 <xTaskIncrementTick+0x158>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	693a      	ldr	r2, [r7, #16]
 8002446:	429a      	cmp	r2, r3
 8002448:	d348      	bcc.n	80024dc <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800244a:	4b36      	ldr	r3, [pc, #216]	; (8002524 <xTaskIncrementTick+0x14c>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d104      	bne.n	800245e <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002454:	4b36      	ldr	r3, [pc, #216]	; (8002530 <xTaskIncrementTick+0x158>)
 8002456:	f04f 32ff 	mov.w	r2, #4294967295
 800245a:	601a      	str	r2, [r3, #0]
					break;
 800245c:	e03e      	b.n	80024dc <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800245e:	4b31      	ldr	r3, [pc, #196]	; (8002524 <xTaskIncrementTick+0x14c>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	68db      	ldr	r3, [r3, #12]
 8002466:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800246e:	693a      	ldr	r2, [r7, #16]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	429a      	cmp	r2, r3
 8002474:	d203      	bcs.n	800247e <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002476:	4a2e      	ldr	r2, [pc, #184]	; (8002530 <xTaskIncrementTick+0x158>)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800247c:	e02e      	b.n	80024dc <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	3304      	adds	r3, #4
 8002482:	4618      	mov	r0, r3
 8002484:	f7ff fcb3 	bl	8001dee <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800248c:	2b00      	cmp	r3, #0
 800248e:	d004      	beq.n	800249a <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	3318      	adds	r3, #24
 8002494:	4618      	mov	r0, r3
 8002496:	f7ff fcaa 	bl	8001dee <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800249e:	2201      	movs	r2, #1
 80024a0:	409a      	lsls	r2, r3
 80024a2:	4b24      	ldr	r3, [pc, #144]	; (8002534 <xTaskIncrementTick+0x15c>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	4a22      	ldr	r2, [pc, #136]	; (8002534 <xTaskIncrementTick+0x15c>)
 80024aa:	6013      	str	r3, [r2, #0]
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024b0:	4613      	mov	r3, r2
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	4413      	add	r3, r2
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	4a1f      	ldr	r2, [pc, #124]	; (8002538 <xTaskIncrementTick+0x160>)
 80024ba:	441a      	add	r2, r3
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	3304      	adds	r3, #4
 80024c0:	4619      	mov	r1, r3
 80024c2:	4610      	mov	r0, r2
 80024c4:	f7ff fc36 	bl	8001d34 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024cc:	4b1b      	ldr	r3, [pc, #108]	; (800253c <xTaskIncrementTick+0x164>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024d2:	429a      	cmp	r2, r3
 80024d4:	d3b9      	bcc.n	800244a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80024d6:	2301      	movs	r3, #1
 80024d8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80024da:	e7b6      	b.n	800244a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80024dc:	4b17      	ldr	r3, [pc, #92]	; (800253c <xTaskIncrementTick+0x164>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024e2:	4915      	ldr	r1, [pc, #84]	; (8002538 <xTaskIncrementTick+0x160>)
 80024e4:	4613      	mov	r3, r2
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	4413      	add	r3, r2
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	440b      	add	r3, r1
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d907      	bls.n	8002504 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 80024f4:	2301      	movs	r3, #1
 80024f6:	617b      	str	r3, [r7, #20]
 80024f8:	e004      	b.n	8002504 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80024fa:	4b11      	ldr	r3, [pc, #68]	; (8002540 <xTaskIncrementTick+0x168>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	3301      	adds	r3, #1
 8002500:	4a0f      	ldr	r2, [pc, #60]	; (8002540 <xTaskIncrementTick+0x168>)
 8002502:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8002504:	4b0f      	ldr	r3, [pc, #60]	; (8002544 <xTaskIncrementTick+0x16c>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d001      	beq.n	8002510 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 800250c:	2301      	movs	r3, #1
 800250e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8002510:	697b      	ldr	r3, [r7, #20]
}
 8002512:	4618      	mov	r0, r3
 8002514:	3718      	adds	r7, #24
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	200003c8 	.word	0x200003c8
 8002520:	200003a4 	.word	0x200003a4
 8002524:	20000358 	.word	0x20000358
 8002528:	2000035c 	.word	0x2000035c
 800252c:	200003b8 	.word	0x200003b8
 8002530:	200003c0 	.word	0x200003c0
 8002534:	200003a8 	.word	0x200003a8
 8002538:	200002a4 	.word	0x200002a4
 800253c:	200002a0 	.word	0x200002a0
 8002540:	200003b0 	.word	0x200003b0
 8002544:	200003b4 	.word	0x200003b4

08002548 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002548:	b480      	push	{r7}
 800254a:	b087      	sub	sp, #28
 800254c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800254e:	4b26      	ldr	r3, [pc, #152]	; (80025e8 <vTaskSwitchContext+0xa0>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d003      	beq.n	800255e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002556:	4b25      	ldr	r3, [pc, #148]	; (80025ec <vTaskSwitchContext+0xa4>)
 8002558:	2201      	movs	r2, #1
 800255a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800255c:	e03e      	b.n	80025dc <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800255e:	4b23      	ldr	r3, [pc, #140]	; (80025ec <vTaskSwitchContext+0xa4>)
 8002560:	2200      	movs	r2, #0
 8002562:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002564:	4b22      	ldr	r3, [pc, #136]	; (80025f0 <vTaskSwitchContext+0xa8>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	fab3 f383 	clz	r3, r3
 8002570:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8002572:	7afb      	ldrb	r3, [r7, #11]
 8002574:	f1c3 031f 	rsb	r3, r3, #31
 8002578:	617b      	str	r3, [r7, #20]
 800257a:	491e      	ldr	r1, [pc, #120]	; (80025f4 <vTaskSwitchContext+0xac>)
 800257c:	697a      	ldr	r2, [r7, #20]
 800257e:	4613      	mov	r3, r2
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	4413      	add	r3, r2
 8002584:	009b      	lsls	r3, r3, #2
 8002586:	440b      	add	r3, r1
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d109      	bne.n	80025a2 <vTaskSwitchContext+0x5a>
	__asm volatile
 800258e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002592:	f383 8811 	msr	BASEPRI, r3
 8002596:	f3bf 8f6f 	isb	sy
 800259a:	f3bf 8f4f 	dsb	sy
 800259e:	607b      	str	r3, [r7, #4]
 80025a0:	e7fe      	b.n	80025a0 <vTaskSwitchContext+0x58>
 80025a2:	697a      	ldr	r2, [r7, #20]
 80025a4:	4613      	mov	r3, r2
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	4413      	add	r3, r2
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	4a11      	ldr	r2, [pc, #68]	; (80025f4 <vTaskSwitchContext+0xac>)
 80025ae:	4413      	add	r3, r2
 80025b0:	613b      	str	r3, [r7, #16]
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	685a      	ldr	r2, [r3, #4]
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	605a      	str	r2, [r3, #4]
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	685a      	ldr	r2, [r3, #4]
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	3308      	adds	r3, #8
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d104      	bne.n	80025d2 <vTaskSwitchContext+0x8a>
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	685a      	ldr	r2, [r3, #4]
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	605a      	str	r2, [r3, #4]
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	4a07      	ldr	r2, [pc, #28]	; (80025f8 <vTaskSwitchContext+0xb0>)
 80025da:	6013      	str	r3, [r2, #0]
}
 80025dc:	bf00      	nop
 80025de:	371c      	adds	r7, #28
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr
 80025e8:	200003c8 	.word	0x200003c8
 80025ec:	200003b4 	.word	0x200003b4
 80025f0:	200003a8 	.word	0x200003a8
 80025f4:	200002a4 	.word	0x200002a4
 80025f8:	200002a0 	.word	0x200002a0

080025fc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b082      	sub	sp, #8
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002604:	f000 f852 	bl	80026ac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002608:	4b06      	ldr	r3, [pc, #24]	; (8002624 <prvIdleTask+0x28>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	2b01      	cmp	r3, #1
 800260e:	d9f9      	bls.n	8002604 <prvIdleTask+0x8>
			{
				taskYIELD();
 8002610:	4b05      	ldr	r3, [pc, #20]	; (8002628 <prvIdleTask+0x2c>)
 8002612:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002616:	601a      	str	r2, [r3, #0]
 8002618:	f3bf 8f4f 	dsb	sy
 800261c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002620:	e7f0      	b.n	8002604 <prvIdleTask+0x8>
 8002622:	bf00      	nop
 8002624:	200002a4 	.word	0x200002a4
 8002628:	e000ed04 	.word	0xe000ed04

0800262c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002632:	2300      	movs	r3, #0
 8002634:	607b      	str	r3, [r7, #4]
 8002636:	e00c      	b.n	8002652 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002638:	687a      	ldr	r2, [r7, #4]
 800263a:	4613      	mov	r3, r2
 800263c:	009b      	lsls	r3, r3, #2
 800263e:	4413      	add	r3, r2
 8002640:	009b      	lsls	r3, r3, #2
 8002642:	4a12      	ldr	r2, [pc, #72]	; (800268c <prvInitialiseTaskLists+0x60>)
 8002644:	4413      	add	r3, r2
 8002646:	4618      	mov	r0, r3
 8002648:	f7ff fb47 	bl	8001cda <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	3301      	adds	r3, #1
 8002650:	607b      	str	r3, [r7, #4]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2b06      	cmp	r3, #6
 8002656:	d9ef      	bls.n	8002638 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002658:	480d      	ldr	r0, [pc, #52]	; (8002690 <prvInitialiseTaskLists+0x64>)
 800265a:	f7ff fb3e 	bl	8001cda <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800265e:	480d      	ldr	r0, [pc, #52]	; (8002694 <prvInitialiseTaskLists+0x68>)
 8002660:	f7ff fb3b 	bl	8001cda <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002664:	480c      	ldr	r0, [pc, #48]	; (8002698 <prvInitialiseTaskLists+0x6c>)
 8002666:	f7ff fb38 	bl	8001cda <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800266a:	480c      	ldr	r0, [pc, #48]	; (800269c <prvInitialiseTaskLists+0x70>)
 800266c:	f7ff fb35 	bl	8001cda <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002670:	480b      	ldr	r0, [pc, #44]	; (80026a0 <prvInitialiseTaskLists+0x74>)
 8002672:	f7ff fb32 	bl	8001cda <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002676:	4b0b      	ldr	r3, [pc, #44]	; (80026a4 <prvInitialiseTaskLists+0x78>)
 8002678:	4a05      	ldr	r2, [pc, #20]	; (8002690 <prvInitialiseTaskLists+0x64>)
 800267a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800267c:	4b0a      	ldr	r3, [pc, #40]	; (80026a8 <prvInitialiseTaskLists+0x7c>)
 800267e:	4a05      	ldr	r2, [pc, #20]	; (8002694 <prvInitialiseTaskLists+0x68>)
 8002680:	601a      	str	r2, [r3, #0]
}
 8002682:	bf00      	nop
 8002684:	3708      	adds	r7, #8
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	200002a4 	.word	0x200002a4
 8002690:	20000330 	.word	0x20000330
 8002694:	20000344 	.word	0x20000344
 8002698:	20000360 	.word	0x20000360
 800269c:	20000374 	.word	0x20000374
 80026a0:	2000038c 	.word	0x2000038c
 80026a4:	20000358 	.word	0x20000358
 80026a8:	2000035c 	.word	0x2000035c

080026ac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b082      	sub	sp, #8
 80026b0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80026b2:	e019      	b.n	80026e8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80026b4:	f000 fa22 	bl	8002afc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80026b8:	4b0f      	ldr	r3, [pc, #60]	; (80026f8 <prvCheckTasksWaitingTermination+0x4c>)
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	68db      	ldr	r3, [r3, #12]
 80026be:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	3304      	adds	r3, #4
 80026c4:	4618      	mov	r0, r3
 80026c6:	f7ff fb92 	bl	8001dee <uxListRemove>
				--uxCurrentNumberOfTasks;
 80026ca:	4b0c      	ldr	r3, [pc, #48]	; (80026fc <prvCheckTasksWaitingTermination+0x50>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	3b01      	subs	r3, #1
 80026d0:	4a0a      	ldr	r2, [pc, #40]	; (80026fc <prvCheckTasksWaitingTermination+0x50>)
 80026d2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80026d4:	4b0a      	ldr	r3, [pc, #40]	; (8002700 <prvCheckTasksWaitingTermination+0x54>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	3b01      	subs	r3, #1
 80026da:	4a09      	ldr	r2, [pc, #36]	; (8002700 <prvCheckTasksWaitingTermination+0x54>)
 80026dc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80026de:	f000 fa3b 	bl	8002b58 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f000 f80e 	bl	8002704 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80026e8:	4b05      	ldr	r3, [pc, #20]	; (8002700 <prvCheckTasksWaitingTermination+0x54>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d1e1      	bne.n	80026b4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80026f0:	bf00      	nop
 80026f2:	3708      	adds	r7, #8
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	20000374 	.word	0x20000374
 80026fc:	200003a0 	.word	0x200003a0
 8002700:	20000388 	.word	0x20000388

08002704 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002704:	b580      	push	{r7, lr}
 8002706:	b084      	sub	sp, #16
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002712:	2b00      	cmp	r3, #0
 8002714:	d108      	bne.n	8002728 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800271a:	4618      	mov	r0, r3
 800271c:	f000 fb8c 	bl	8002e38 <vPortFree>
				vPortFree( pxTCB );
 8002720:	6878      	ldr	r0, [r7, #4]
 8002722:	f000 fb89 	bl	8002e38 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002726:	e017      	b.n	8002758 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800272e:	2b01      	cmp	r3, #1
 8002730:	d103      	bne.n	800273a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f000 fb80 	bl	8002e38 <vPortFree>
	}
 8002738:	e00e      	b.n	8002758 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002740:	2b02      	cmp	r3, #2
 8002742:	d009      	beq.n	8002758 <prvDeleteTCB+0x54>
 8002744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002748:	f383 8811 	msr	BASEPRI, r3
 800274c:	f3bf 8f6f 	isb	sy
 8002750:	f3bf 8f4f 	dsb	sy
 8002754:	60fb      	str	r3, [r7, #12]
 8002756:	e7fe      	b.n	8002756 <prvDeleteTCB+0x52>
	}
 8002758:	bf00      	nop
 800275a:	3710      	adds	r7, #16
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}

08002760 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002760:	b480      	push	{r7}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002766:	4b0c      	ldr	r3, [pc, #48]	; (8002798 <prvResetNextTaskUnblockTime+0x38>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d104      	bne.n	800277a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002770:	4b0a      	ldr	r3, [pc, #40]	; (800279c <prvResetNextTaskUnblockTime+0x3c>)
 8002772:	f04f 32ff 	mov.w	r2, #4294967295
 8002776:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002778:	e008      	b.n	800278c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800277a:	4b07      	ldr	r3, [pc, #28]	; (8002798 <prvResetNextTaskUnblockTime+0x38>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	68db      	ldr	r3, [r3, #12]
 8002782:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	4a04      	ldr	r2, [pc, #16]	; (800279c <prvResetNextTaskUnblockTime+0x3c>)
 800278a:	6013      	str	r3, [r2, #0]
}
 800278c:	bf00      	nop
 800278e:	370c      	adds	r7, #12
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr
 8002798:	20000358 	.word	0x20000358
 800279c:	200003c0 	.word	0x200003c0

080027a0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80027a0:	b480      	push	{r7}
 80027a2:	b083      	sub	sp, #12
 80027a4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80027a6:	4b0b      	ldr	r3, [pc, #44]	; (80027d4 <xTaskGetSchedulerState+0x34>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d102      	bne.n	80027b4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80027ae:	2301      	movs	r3, #1
 80027b0:	607b      	str	r3, [r7, #4]
 80027b2:	e008      	b.n	80027c6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80027b4:	4b08      	ldr	r3, [pc, #32]	; (80027d8 <xTaskGetSchedulerState+0x38>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d102      	bne.n	80027c2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80027bc:	2302      	movs	r3, #2
 80027be:	607b      	str	r3, [r7, #4]
 80027c0:	e001      	b.n	80027c6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80027c2:	2300      	movs	r3, #0
 80027c4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80027c6:	687b      	ldr	r3, [r7, #4]
	}
 80027c8:	4618      	mov	r0, r3
 80027ca:	370c      	adds	r7, #12
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr
 80027d4:	200003ac 	.word	0x200003ac
 80027d8:	200003c8 	.word	0x200003c8

080027dc <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b084      	sub	sp, #16
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
 80027e4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80027e6:	4b29      	ldr	r3, [pc, #164]	; (800288c <prvAddCurrentTaskToDelayedList+0xb0>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80027ec:	4b28      	ldr	r3, [pc, #160]	; (8002890 <prvAddCurrentTaskToDelayedList+0xb4>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	3304      	adds	r3, #4
 80027f2:	4618      	mov	r0, r3
 80027f4:	f7ff fafb 	bl	8001dee <uxListRemove>
 80027f8:	4603      	mov	r3, r0
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d10b      	bne.n	8002816 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80027fe:	4b24      	ldr	r3, [pc, #144]	; (8002890 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002804:	2201      	movs	r2, #1
 8002806:	fa02 f303 	lsl.w	r3, r2, r3
 800280a:	43da      	mvns	r2, r3
 800280c:	4b21      	ldr	r3, [pc, #132]	; (8002894 <prvAddCurrentTaskToDelayedList+0xb8>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4013      	ands	r3, r2
 8002812:	4a20      	ldr	r2, [pc, #128]	; (8002894 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002814:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	f1b3 3fff 	cmp.w	r3, #4294967295
 800281c:	d10a      	bne.n	8002834 <prvAddCurrentTaskToDelayedList+0x58>
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d007      	beq.n	8002834 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002824:	4b1a      	ldr	r3, [pc, #104]	; (8002890 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	3304      	adds	r3, #4
 800282a:	4619      	mov	r1, r3
 800282c:	481a      	ldr	r0, [pc, #104]	; (8002898 <prvAddCurrentTaskToDelayedList+0xbc>)
 800282e:	f7ff fa81 	bl	8001d34 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002832:	e026      	b.n	8002882 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002834:	68fa      	ldr	r2, [r7, #12]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	4413      	add	r3, r2
 800283a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800283c:	4b14      	ldr	r3, [pc, #80]	; (8002890 <prvAddCurrentTaskToDelayedList+0xb4>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	68ba      	ldr	r2, [r7, #8]
 8002842:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8002844:	68ba      	ldr	r2, [r7, #8]
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	429a      	cmp	r2, r3
 800284a:	d209      	bcs.n	8002860 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800284c:	4b13      	ldr	r3, [pc, #76]	; (800289c <prvAddCurrentTaskToDelayedList+0xc0>)
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	4b0f      	ldr	r3, [pc, #60]	; (8002890 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	3304      	adds	r3, #4
 8002856:	4619      	mov	r1, r3
 8002858:	4610      	mov	r0, r2
 800285a:	f7ff fa8f 	bl	8001d7c <vListInsert>
}
 800285e:	e010      	b.n	8002882 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002860:	4b0f      	ldr	r3, [pc, #60]	; (80028a0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	4b0a      	ldr	r3, [pc, #40]	; (8002890 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	3304      	adds	r3, #4
 800286a:	4619      	mov	r1, r3
 800286c:	4610      	mov	r0, r2
 800286e:	f7ff fa85 	bl	8001d7c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002872:	4b0c      	ldr	r3, [pc, #48]	; (80028a4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	68ba      	ldr	r2, [r7, #8]
 8002878:	429a      	cmp	r2, r3
 800287a:	d202      	bcs.n	8002882 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800287c:	4a09      	ldr	r2, [pc, #36]	; (80028a4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	6013      	str	r3, [r2, #0]
}
 8002882:	bf00      	nop
 8002884:	3710      	adds	r7, #16
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	200003a4 	.word	0x200003a4
 8002890:	200002a0 	.word	0x200002a0
 8002894:	200003a8 	.word	0x200003a8
 8002898:	2000038c 	.word	0x2000038c
 800289c:	2000035c 	.word	0x2000035c
 80028a0:	20000358 	.word	0x20000358
 80028a4:	200003c0 	.word	0x200003c0

080028a8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80028a8:	b480      	push	{r7}
 80028aa:	b085      	sub	sp, #20
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	60f8      	str	r0, [r7, #12]
 80028b0:	60b9      	str	r1, [r7, #8]
 80028b2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	3b04      	subs	r3, #4
 80028b8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80028c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	3b04      	subs	r3, #4
 80028c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	f023 0201 	bic.w	r2, r3, #1
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	3b04      	subs	r3, #4
 80028d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80028d8:	4a0c      	ldr	r2, [pc, #48]	; (800290c <pxPortInitialiseStack+0x64>)
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	3b14      	subs	r3, #20
 80028e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80028e4:	687a      	ldr	r2, [r7, #4]
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	3b04      	subs	r3, #4
 80028ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	f06f 0202 	mvn.w	r2, #2
 80028f6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	3b20      	subs	r3, #32
 80028fc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80028fe:	68fb      	ldr	r3, [r7, #12]
}
 8002900:	4618      	mov	r0, r3
 8002902:	3714      	adds	r7, #20
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr
 800290c:	08002911 	.word	0x08002911

08002910 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002910:	b480      	push	{r7}
 8002912:	b085      	sub	sp, #20
 8002914:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8002916:	2300      	movs	r3, #0
 8002918:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800291a:	4b11      	ldr	r3, [pc, #68]	; (8002960 <prvTaskExitError+0x50>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002922:	d009      	beq.n	8002938 <prvTaskExitError+0x28>
 8002924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002928:	f383 8811 	msr	BASEPRI, r3
 800292c:	f3bf 8f6f 	isb	sy
 8002930:	f3bf 8f4f 	dsb	sy
 8002934:	60fb      	str	r3, [r7, #12]
 8002936:	e7fe      	b.n	8002936 <prvTaskExitError+0x26>
 8002938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800293c:	f383 8811 	msr	BASEPRI, r3
 8002940:	f3bf 8f6f 	isb	sy
 8002944:	f3bf 8f4f 	dsb	sy
 8002948:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800294a:	bf00      	nop
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d0fc      	beq.n	800294c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8002952:	bf00      	nop
 8002954:	3714      	adds	r7, #20
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr
 800295e:	bf00      	nop
 8002960:	20000018 	.word	0x20000018
	...

08002970 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002970:	4b07      	ldr	r3, [pc, #28]	; (8002990 <pxCurrentTCBConst2>)
 8002972:	6819      	ldr	r1, [r3, #0]
 8002974:	6808      	ldr	r0, [r1, #0]
 8002976:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800297a:	f380 8809 	msr	PSP, r0
 800297e:	f3bf 8f6f 	isb	sy
 8002982:	f04f 0000 	mov.w	r0, #0
 8002986:	f380 8811 	msr	BASEPRI, r0
 800298a:	4770      	bx	lr
 800298c:	f3af 8000 	nop.w

08002990 <pxCurrentTCBConst2>:
 8002990:	200002a0 	.word	0x200002a0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8002994:	bf00      	nop
 8002996:	bf00      	nop

08002998 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8002998:	4808      	ldr	r0, [pc, #32]	; (80029bc <prvPortStartFirstTask+0x24>)
 800299a:	6800      	ldr	r0, [r0, #0]
 800299c:	6800      	ldr	r0, [r0, #0]
 800299e:	f380 8808 	msr	MSP, r0
 80029a2:	f04f 0000 	mov.w	r0, #0
 80029a6:	f380 8814 	msr	CONTROL, r0
 80029aa:	b662      	cpsie	i
 80029ac:	b661      	cpsie	f
 80029ae:	f3bf 8f4f 	dsb	sy
 80029b2:	f3bf 8f6f 	isb	sy
 80029b6:	df00      	svc	0
 80029b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80029ba:	bf00      	nop
 80029bc:	e000ed08 	.word	0xe000ed08

080029c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b086      	sub	sp, #24
 80029c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80029c6:	4b44      	ldr	r3, [pc, #272]	; (8002ad8 <xPortStartScheduler+0x118>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a44      	ldr	r2, [pc, #272]	; (8002adc <xPortStartScheduler+0x11c>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d109      	bne.n	80029e4 <xPortStartScheduler+0x24>
 80029d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029d4:	f383 8811 	msr	BASEPRI, r3
 80029d8:	f3bf 8f6f 	isb	sy
 80029dc:	f3bf 8f4f 	dsb	sy
 80029e0:	613b      	str	r3, [r7, #16]
 80029e2:	e7fe      	b.n	80029e2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80029e4:	4b3c      	ldr	r3, [pc, #240]	; (8002ad8 <xPortStartScheduler+0x118>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a3d      	ldr	r2, [pc, #244]	; (8002ae0 <xPortStartScheduler+0x120>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d109      	bne.n	8002a02 <xPortStartScheduler+0x42>
 80029ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029f2:	f383 8811 	msr	BASEPRI, r3
 80029f6:	f3bf 8f6f 	isb	sy
 80029fa:	f3bf 8f4f 	dsb	sy
 80029fe:	60fb      	str	r3, [r7, #12]
 8002a00:	e7fe      	b.n	8002a00 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002a02:	4b38      	ldr	r3, [pc, #224]	; (8002ae4 <xPortStartScheduler+0x124>)
 8002a04:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	781b      	ldrb	r3, [r3, #0]
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	22ff      	movs	r2, #255	; 0xff
 8002a12:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002a1c:	78fb      	ldrb	r3, [r7, #3]
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002a24:	b2da      	uxtb	r2, r3
 8002a26:	4b30      	ldr	r3, [pc, #192]	; (8002ae8 <xPortStartScheduler+0x128>)
 8002a28:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002a2a:	4b30      	ldr	r3, [pc, #192]	; (8002aec <xPortStartScheduler+0x12c>)
 8002a2c:	2207      	movs	r2, #7
 8002a2e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002a30:	e009      	b.n	8002a46 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8002a32:	4b2e      	ldr	r3, [pc, #184]	; (8002aec <xPortStartScheduler+0x12c>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	3b01      	subs	r3, #1
 8002a38:	4a2c      	ldr	r2, [pc, #176]	; (8002aec <xPortStartScheduler+0x12c>)
 8002a3a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002a3c:	78fb      	ldrb	r3, [r7, #3]
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	005b      	lsls	r3, r3, #1
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002a46:	78fb      	ldrb	r3, [r7, #3]
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a4e:	2b80      	cmp	r3, #128	; 0x80
 8002a50:	d0ef      	beq.n	8002a32 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002a52:	4b26      	ldr	r3, [pc, #152]	; (8002aec <xPortStartScheduler+0x12c>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f1c3 0307 	rsb	r3, r3, #7
 8002a5a:	2b04      	cmp	r3, #4
 8002a5c:	d009      	beq.n	8002a72 <xPortStartScheduler+0xb2>
 8002a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a62:	f383 8811 	msr	BASEPRI, r3
 8002a66:	f3bf 8f6f 	isb	sy
 8002a6a:	f3bf 8f4f 	dsb	sy
 8002a6e:	60bb      	str	r3, [r7, #8]
 8002a70:	e7fe      	b.n	8002a70 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002a72:	4b1e      	ldr	r3, [pc, #120]	; (8002aec <xPortStartScheduler+0x12c>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	021b      	lsls	r3, r3, #8
 8002a78:	4a1c      	ldr	r2, [pc, #112]	; (8002aec <xPortStartScheduler+0x12c>)
 8002a7a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002a7c:	4b1b      	ldr	r3, [pc, #108]	; (8002aec <xPortStartScheduler+0x12c>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002a84:	4a19      	ldr	r2, [pc, #100]	; (8002aec <xPortStartScheduler+0x12c>)
 8002a86:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	b2da      	uxtb	r2, r3
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002a90:	4b17      	ldr	r3, [pc, #92]	; (8002af0 <xPortStartScheduler+0x130>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a16      	ldr	r2, [pc, #88]	; (8002af0 <xPortStartScheduler+0x130>)
 8002a96:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a9a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002a9c:	4b14      	ldr	r3, [pc, #80]	; (8002af0 <xPortStartScheduler+0x130>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a13      	ldr	r2, [pc, #76]	; (8002af0 <xPortStartScheduler+0x130>)
 8002aa2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002aa6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8002aa8:	f000 f8d6 	bl	8002c58 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8002aac:	4b11      	ldr	r3, [pc, #68]	; (8002af4 <xPortStartScheduler+0x134>)
 8002aae:	2200      	movs	r2, #0
 8002ab0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8002ab2:	f000 f8f5 	bl	8002ca0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002ab6:	4b10      	ldr	r3, [pc, #64]	; (8002af8 <xPortStartScheduler+0x138>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a0f      	ldr	r2, [pc, #60]	; (8002af8 <xPortStartScheduler+0x138>)
 8002abc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002ac0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8002ac2:	f7ff ff69 	bl	8002998 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8002ac6:	f7ff fd3f 	bl	8002548 <vTaskSwitchContext>
	prvTaskExitError();
 8002aca:	f7ff ff21 	bl	8002910 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8002ace:	2300      	movs	r3, #0
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3718      	adds	r7, #24
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	e000ed00 	.word	0xe000ed00
 8002adc:	410fc271 	.word	0x410fc271
 8002ae0:	410fc270 	.word	0x410fc270
 8002ae4:	e000e400 	.word	0xe000e400
 8002ae8:	200003cc 	.word	0x200003cc
 8002aec:	200003d0 	.word	0x200003d0
 8002af0:	e000ed20 	.word	0xe000ed20
 8002af4:	20000018 	.word	0x20000018
 8002af8:	e000ef34 	.word	0xe000ef34

08002afc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002afc:	b480      	push	{r7}
 8002afe:	b083      	sub	sp, #12
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b06:	f383 8811 	msr	BASEPRI, r3
 8002b0a:	f3bf 8f6f 	isb	sy
 8002b0e:	f3bf 8f4f 	dsb	sy
 8002b12:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8002b14:	4b0e      	ldr	r3, [pc, #56]	; (8002b50 <vPortEnterCritical+0x54>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	3301      	adds	r3, #1
 8002b1a:	4a0d      	ldr	r2, [pc, #52]	; (8002b50 <vPortEnterCritical+0x54>)
 8002b1c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8002b1e:	4b0c      	ldr	r3, [pc, #48]	; (8002b50 <vPortEnterCritical+0x54>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d10e      	bne.n	8002b44 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002b26:	4b0b      	ldr	r3, [pc, #44]	; (8002b54 <vPortEnterCritical+0x58>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d009      	beq.n	8002b44 <vPortEnterCritical+0x48>
 8002b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b34:	f383 8811 	msr	BASEPRI, r3
 8002b38:	f3bf 8f6f 	isb	sy
 8002b3c:	f3bf 8f4f 	dsb	sy
 8002b40:	603b      	str	r3, [r7, #0]
 8002b42:	e7fe      	b.n	8002b42 <vPortEnterCritical+0x46>
	}
}
 8002b44:	bf00      	nop
 8002b46:	370c      	adds	r7, #12
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr
 8002b50:	20000018 	.word	0x20000018
 8002b54:	e000ed04 	.word	0xe000ed04

08002b58 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b083      	sub	sp, #12
 8002b5c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8002b5e:	4b11      	ldr	r3, [pc, #68]	; (8002ba4 <vPortExitCritical+0x4c>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d109      	bne.n	8002b7a <vPortExitCritical+0x22>
 8002b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b6a:	f383 8811 	msr	BASEPRI, r3
 8002b6e:	f3bf 8f6f 	isb	sy
 8002b72:	f3bf 8f4f 	dsb	sy
 8002b76:	607b      	str	r3, [r7, #4]
 8002b78:	e7fe      	b.n	8002b78 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8002b7a:	4b0a      	ldr	r3, [pc, #40]	; (8002ba4 <vPortExitCritical+0x4c>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	3b01      	subs	r3, #1
 8002b80:	4a08      	ldr	r2, [pc, #32]	; (8002ba4 <vPortExitCritical+0x4c>)
 8002b82:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002b84:	4b07      	ldr	r3, [pc, #28]	; (8002ba4 <vPortExitCritical+0x4c>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d104      	bne.n	8002b96 <vPortExitCritical+0x3e>
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8002b96:	bf00      	nop
 8002b98:	370c      	adds	r7, #12
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr
 8002ba2:	bf00      	nop
 8002ba4:	20000018 	.word	0x20000018
	...

08002bb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002bb0:	f3ef 8009 	mrs	r0, PSP
 8002bb4:	f3bf 8f6f 	isb	sy
 8002bb8:	4b15      	ldr	r3, [pc, #84]	; (8002c10 <pxCurrentTCBConst>)
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	f01e 0f10 	tst.w	lr, #16
 8002bc0:	bf08      	it	eq
 8002bc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002bc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002bca:	6010      	str	r0, [r2, #0]
 8002bcc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002bd0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002bd4:	f380 8811 	msr	BASEPRI, r0
 8002bd8:	f3bf 8f4f 	dsb	sy
 8002bdc:	f3bf 8f6f 	isb	sy
 8002be0:	f7ff fcb2 	bl	8002548 <vTaskSwitchContext>
 8002be4:	f04f 0000 	mov.w	r0, #0
 8002be8:	f380 8811 	msr	BASEPRI, r0
 8002bec:	bc09      	pop	{r0, r3}
 8002bee:	6819      	ldr	r1, [r3, #0]
 8002bf0:	6808      	ldr	r0, [r1, #0]
 8002bf2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002bf6:	f01e 0f10 	tst.w	lr, #16
 8002bfa:	bf08      	it	eq
 8002bfc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002c00:	f380 8809 	msr	PSP, r0
 8002c04:	f3bf 8f6f 	isb	sy
 8002c08:	4770      	bx	lr
 8002c0a:	bf00      	nop
 8002c0c:	f3af 8000 	nop.w

08002c10 <pxCurrentTCBConst>:
 8002c10:	200002a0 	.word	0x200002a0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8002c14:	bf00      	nop
 8002c16:	bf00      	nop

08002c18 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b082      	sub	sp, #8
 8002c1c:	af00      	add	r7, sp, #0
	__asm volatile
 8002c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c22:	f383 8811 	msr	BASEPRI, r3
 8002c26:	f3bf 8f6f 	isb	sy
 8002c2a:	f3bf 8f4f 	dsb	sy
 8002c2e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002c30:	f7ff fbd2 	bl	80023d8 <xTaskIncrementTick>
 8002c34:	4603      	mov	r3, r0
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d003      	beq.n	8002c42 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002c3a:	4b06      	ldr	r3, [pc, #24]	; (8002c54 <xPortSysTickHandler+0x3c>)
 8002c3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c40:	601a      	str	r2, [r3, #0]
 8002c42:	2300      	movs	r3, #0
 8002c44:	603b      	str	r3, [r7, #0]
	__asm volatile
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8002c4c:	bf00      	nop
 8002c4e:	3708      	adds	r7, #8
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	e000ed04 	.word	0xe000ed04

08002c58 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8002c58:	b480      	push	{r7}
 8002c5a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002c5c:	4b0b      	ldr	r3, [pc, #44]	; (8002c8c <vPortSetupTimerInterrupt+0x34>)
 8002c5e:	2200      	movs	r2, #0
 8002c60:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002c62:	4b0b      	ldr	r3, [pc, #44]	; (8002c90 <vPortSetupTimerInterrupt+0x38>)
 8002c64:	2200      	movs	r2, #0
 8002c66:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002c68:	4b0a      	ldr	r3, [pc, #40]	; (8002c94 <vPortSetupTimerInterrupt+0x3c>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a0a      	ldr	r2, [pc, #40]	; (8002c98 <vPortSetupTimerInterrupt+0x40>)
 8002c6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c72:	099b      	lsrs	r3, r3, #6
 8002c74:	4a09      	ldr	r2, [pc, #36]	; (8002c9c <vPortSetupTimerInterrupt+0x44>)
 8002c76:	3b01      	subs	r3, #1
 8002c78:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002c7a:	4b04      	ldr	r3, [pc, #16]	; (8002c8c <vPortSetupTimerInterrupt+0x34>)
 8002c7c:	2207      	movs	r2, #7
 8002c7e:	601a      	str	r2, [r3, #0]
}
 8002c80:	bf00      	nop
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr
 8002c8a:	bf00      	nop
 8002c8c:	e000e010 	.word	0xe000e010
 8002c90:	e000e018 	.word	0xe000e018
 8002c94:	2000000c 	.word	0x2000000c
 8002c98:	10624dd3 	.word	0x10624dd3
 8002c9c:	e000e014 	.word	0xe000e014

08002ca0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8002ca0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002cb0 <vPortEnableVFP+0x10>
 8002ca4:	6801      	ldr	r1, [r0, #0]
 8002ca6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002caa:	6001      	str	r1, [r0, #0]
 8002cac:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8002cae:	bf00      	nop
 8002cb0:	e000ed88 	.word	0xe000ed88

08002cb4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b08a      	sub	sp, #40	; 0x28
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8002cc0:	f7ff fae0 	bl	8002284 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8002cc4:	4b57      	ldr	r3, [pc, #348]	; (8002e24 <pvPortMalloc+0x170>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d101      	bne.n	8002cd0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8002ccc:	f000 f90c 	bl	8002ee8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002cd0:	4b55      	ldr	r3, [pc, #340]	; (8002e28 <pvPortMalloc+0x174>)
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	f040 808c 	bne.w	8002df6 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d01c      	beq.n	8002d1e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8002ce4:	2208      	movs	r2, #8
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4413      	add	r3, r2
 8002cea:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	f003 0307 	and.w	r3, r3, #7
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d013      	beq.n	8002d1e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	f023 0307 	bic.w	r3, r3, #7
 8002cfc:	3308      	adds	r3, #8
 8002cfe:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	f003 0307 	and.w	r3, r3, #7
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d009      	beq.n	8002d1e <pvPortMalloc+0x6a>
	__asm volatile
 8002d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d0e:	f383 8811 	msr	BASEPRI, r3
 8002d12:	f3bf 8f6f 	isb	sy
 8002d16:	f3bf 8f4f 	dsb	sy
 8002d1a:	617b      	str	r3, [r7, #20]
 8002d1c:	e7fe      	b.n	8002d1c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d068      	beq.n	8002df6 <pvPortMalloc+0x142>
 8002d24:	4b41      	ldr	r3, [pc, #260]	; (8002e2c <pvPortMalloc+0x178>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	687a      	ldr	r2, [r7, #4]
 8002d2a:	429a      	cmp	r2, r3
 8002d2c:	d863      	bhi.n	8002df6 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8002d2e:	4b40      	ldr	r3, [pc, #256]	; (8002e30 <pvPortMalloc+0x17c>)
 8002d30:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8002d32:	4b3f      	ldr	r3, [pc, #252]	; (8002e30 <pvPortMalloc+0x17c>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002d38:	e004      	b.n	8002d44 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8002d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8002d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	687a      	ldr	r2, [r7, #4]
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d903      	bls.n	8002d56 <pvPortMalloc+0xa2>
 8002d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d1f1      	bne.n	8002d3a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8002d56:	4b33      	ldr	r3, [pc, #204]	; (8002e24 <pvPortMalloc+0x170>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d04a      	beq.n	8002df6 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002d60:	6a3b      	ldr	r3, [r7, #32]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	2208      	movs	r2, #8
 8002d66:	4413      	add	r3, r2
 8002d68:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	6a3b      	ldr	r3, [r7, #32]
 8002d70:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d74:	685a      	ldr	r2, [r3, #4]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	1ad2      	subs	r2, r2, r3
 8002d7a:	2308      	movs	r3, #8
 8002d7c:	005b      	lsls	r3, r3, #1
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	d91e      	bls.n	8002dc0 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002d82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	4413      	add	r3, r2
 8002d88:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002d8a:	69bb      	ldr	r3, [r7, #24]
 8002d8c:	f003 0307 	and.w	r3, r3, #7
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d009      	beq.n	8002da8 <pvPortMalloc+0xf4>
 8002d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d98:	f383 8811 	msr	BASEPRI, r3
 8002d9c:	f3bf 8f6f 	isb	sy
 8002da0:	f3bf 8f4f 	dsb	sy
 8002da4:	613b      	str	r3, [r7, #16]
 8002da6:	e7fe      	b.n	8002da6 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002daa:	685a      	ldr	r2, [r3, #4]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	1ad2      	subs	r2, r2, r3
 8002db0:	69bb      	ldr	r3, [r7, #24]
 8002db2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002dba:	69b8      	ldr	r0, [r7, #24]
 8002dbc:	f000 f8f6 	bl	8002fac <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002dc0:	4b1a      	ldr	r3, [pc, #104]	; (8002e2c <pvPortMalloc+0x178>)
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	4a18      	ldr	r2, [pc, #96]	; (8002e2c <pvPortMalloc+0x178>)
 8002dcc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002dce:	4b17      	ldr	r3, [pc, #92]	; (8002e2c <pvPortMalloc+0x178>)
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	4b18      	ldr	r3, [pc, #96]	; (8002e34 <pvPortMalloc+0x180>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d203      	bcs.n	8002de2 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002dda:	4b14      	ldr	r3, [pc, #80]	; (8002e2c <pvPortMalloc+0x178>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a15      	ldr	r2, [pc, #84]	; (8002e34 <pvPortMalloc+0x180>)
 8002de0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de4:	685a      	ldr	r2, [r3, #4]
 8002de6:	4b10      	ldr	r3, [pc, #64]	; (8002e28 <pvPortMalloc+0x174>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	431a      	orrs	r2, r3
 8002dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df2:	2200      	movs	r2, #0
 8002df4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8002df6:	f7ff fa53 	bl	80022a0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002dfa:	69fb      	ldr	r3, [r7, #28]
 8002dfc:	f003 0307 	and.w	r3, r3, #7
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d009      	beq.n	8002e18 <pvPortMalloc+0x164>
 8002e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e08:	f383 8811 	msr	BASEPRI, r3
 8002e0c:	f3bf 8f6f 	isb	sy
 8002e10:	f3bf 8f4f 	dsb	sy
 8002e14:	60fb      	str	r3, [r7, #12]
 8002e16:	e7fe      	b.n	8002e16 <pvPortMalloc+0x162>
	return pvReturn;
 8002e18:	69fb      	ldr	r3, [r7, #28]
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3728      	adds	r7, #40	; 0x28
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	20000f94 	.word	0x20000f94
 8002e28:	20000fa0 	.word	0x20000fa0
 8002e2c:	20000f98 	.word	0x20000f98
 8002e30:	20000f8c 	.word	0x20000f8c
 8002e34:	20000f9c 	.word	0x20000f9c

08002e38 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b086      	sub	sp, #24
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d046      	beq.n	8002ed8 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8002e4a:	2308      	movs	r3, #8
 8002e4c:	425b      	negs	r3, r3
 8002e4e:	697a      	ldr	r2, [r7, #20]
 8002e50:	4413      	add	r3, r2
 8002e52:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	685a      	ldr	r2, [r3, #4]
 8002e5c:	4b20      	ldr	r3, [pc, #128]	; (8002ee0 <vPortFree+0xa8>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4013      	ands	r3, r2
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d109      	bne.n	8002e7a <vPortFree+0x42>
 8002e66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e6a:	f383 8811 	msr	BASEPRI, r3
 8002e6e:	f3bf 8f6f 	isb	sy
 8002e72:	f3bf 8f4f 	dsb	sy
 8002e76:	60fb      	str	r3, [r7, #12]
 8002e78:	e7fe      	b.n	8002e78 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d009      	beq.n	8002e96 <vPortFree+0x5e>
 8002e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e86:	f383 8811 	msr	BASEPRI, r3
 8002e8a:	f3bf 8f6f 	isb	sy
 8002e8e:	f3bf 8f4f 	dsb	sy
 8002e92:	60bb      	str	r3, [r7, #8]
 8002e94:	e7fe      	b.n	8002e94 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	685a      	ldr	r2, [r3, #4]
 8002e9a:	4b11      	ldr	r3, [pc, #68]	; (8002ee0 <vPortFree+0xa8>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d019      	beq.n	8002ed8 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d115      	bne.n	8002ed8 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	685a      	ldr	r2, [r3, #4]
 8002eb0:	4b0b      	ldr	r3, [pc, #44]	; (8002ee0 <vPortFree+0xa8>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	43db      	mvns	r3, r3
 8002eb6:	401a      	ands	r2, r3
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8002ebc:	f7ff f9e2 	bl	8002284 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	685a      	ldr	r2, [r3, #4]
 8002ec4:	4b07      	ldr	r3, [pc, #28]	; (8002ee4 <vPortFree+0xac>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4413      	add	r3, r2
 8002eca:	4a06      	ldr	r2, [pc, #24]	; (8002ee4 <vPortFree+0xac>)
 8002ecc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002ece:	6938      	ldr	r0, [r7, #16]
 8002ed0:	f000 f86c 	bl	8002fac <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8002ed4:	f7ff f9e4 	bl	80022a0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8002ed8:	bf00      	nop
 8002eda:	3718      	adds	r7, #24
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}
 8002ee0:	20000fa0 	.word	0x20000fa0
 8002ee4:	20000f98 	.word	0x20000f98

08002ee8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b085      	sub	sp, #20
 8002eec:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002eee:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8002ef2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8002ef4:	4b27      	ldr	r3, [pc, #156]	; (8002f94 <prvHeapInit+0xac>)
 8002ef6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	f003 0307 	and.w	r3, r3, #7
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d00c      	beq.n	8002f1c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	3307      	adds	r3, #7
 8002f06:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	f023 0307 	bic.w	r3, r3, #7
 8002f0e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002f10:	68ba      	ldr	r2, [r7, #8]
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	4a1f      	ldr	r2, [pc, #124]	; (8002f94 <prvHeapInit+0xac>)
 8002f18:	4413      	add	r3, r2
 8002f1a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002f20:	4a1d      	ldr	r2, [pc, #116]	; (8002f98 <prvHeapInit+0xb0>)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8002f26:	4b1c      	ldr	r3, [pc, #112]	; (8002f98 <prvHeapInit+0xb0>)
 8002f28:	2200      	movs	r2, #0
 8002f2a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	68ba      	ldr	r2, [r7, #8]
 8002f30:	4413      	add	r3, r2
 8002f32:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8002f34:	2208      	movs	r2, #8
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	1a9b      	subs	r3, r3, r2
 8002f3a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	f023 0307 	bic.w	r3, r3, #7
 8002f42:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	4a15      	ldr	r2, [pc, #84]	; (8002f9c <prvHeapInit+0xb4>)
 8002f48:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8002f4a:	4b14      	ldr	r3, [pc, #80]	; (8002f9c <prvHeapInit+0xb4>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8002f52:	4b12      	ldr	r3, [pc, #72]	; (8002f9c <prvHeapInit+0xb4>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	2200      	movs	r2, #0
 8002f58:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	68fa      	ldr	r2, [r7, #12]
 8002f62:	1ad2      	subs	r2, r2, r3
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002f68:	4b0c      	ldr	r3, [pc, #48]	; (8002f9c <prvHeapInit+0xb4>)
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	4a0a      	ldr	r2, [pc, #40]	; (8002fa0 <prvHeapInit+0xb8>)
 8002f76:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	4a09      	ldr	r2, [pc, #36]	; (8002fa4 <prvHeapInit+0xbc>)
 8002f7e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002f80:	4b09      	ldr	r3, [pc, #36]	; (8002fa8 <prvHeapInit+0xc0>)
 8002f82:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002f86:	601a      	str	r2, [r3, #0]
}
 8002f88:	bf00      	nop
 8002f8a:	3714      	adds	r7, #20
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f92:	4770      	bx	lr
 8002f94:	200003d4 	.word	0x200003d4
 8002f98:	20000f8c 	.word	0x20000f8c
 8002f9c:	20000f94 	.word	0x20000f94
 8002fa0:	20000f9c 	.word	0x20000f9c
 8002fa4:	20000f98 	.word	0x20000f98
 8002fa8:	20000fa0 	.word	0x20000fa0

08002fac <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002fac:	b480      	push	{r7}
 8002fae:	b085      	sub	sp, #20
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002fb4:	4b28      	ldr	r3, [pc, #160]	; (8003058 <prvInsertBlockIntoFreeList+0xac>)
 8002fb6:	60fb      	str	r3, [r7, #12]
 8002fb8:	e002      	b.n	8002fc0 <prvInsertBlockIntoFreeList+0x14>
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	60fb      	str	r3, [r7, #12]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	687a      	ldr	r2, [r7, #4]
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d8f7      	bhi.n	8002fba <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	68ba      	ldr	r2, [r7, #8]
 8002fd4:	4413      	add	r3, r2
 8002fd6:	687a      	ldr	r2, [r7, #4]
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d108      	bne.n	8002fee <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	685a      	ldr	r2, [r3, #4]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	441a      	add	r2, r3
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	68ba      	ldr	r2, [r7, #8]
 8002ff8:	441a      	add	r2, r3
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	429a      	cmp	r2, r3
 8003000:	d118      	bne.n	8003034 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	4b15      	ldr	r3, [pc, #84]	; (800305c <prvInsertBlockIntoFreeList+0xb0>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	429a      	cmp	r2, r3
 800300c:	d00d      	beq.n	800302a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	685a      	ldr	r2, [r3, #4]
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	441a      	add	r2, r3
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	601a      	str	r2, [r3, #0]
 8003028:	e008      	b.n	800303c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800302a:	4b0c      	ldr	r3, [pc, #48]	; (800305c <prvInsertBlockIntoFreeList+0xb0>)
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	601a      	str	r2, [r3, #0]
 8003032:	e003      	b.n	800303c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800303c:	68fa      	ldr	r2, [r7, #12]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	429a      	cmp	r2, r3
 8003042:	d002      	beq.n	800304a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	687a      	ldr	r2, [r7, #4]
 8003048:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800304a:	bf00      	nop
 800304c:	3714      	adds	r7, #20
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr
 8003056:	bf00      	nop
 8003058:	20000f8c 	.word	0x20000f8c
 800305c:	20000f94 	.word	0x20000f94

08003060 <__libc_init_array>:
 8003060:	b570      	push	{r4, r5, r6, lr}
 8003062:	4e0d      	ldr	r6, [pc, #52]	; (8003098 <__libc_init_array+0x38>)
 8003064:	4c0d      	ldr	r4, [pc, #52]	; (800309c <__libc_init_array+0x3c>)
 8003066:	1ba4      	subs	r4, r4, r6
 8003068:	10a4      	asrs	r4, r4, #2
 800306a:	2500      	movs	r5, #0
 800306c:	42a5      	cmp	r5, r4
 800306e:	d109      	bne.n	8003084 <__libc_init_array+0x24>
 8003070:	4e0b      	ldr	r6, [pc, #44]	; (80030a0 <__libc_init_array+0x40>)
 8003072:	4c0c      	ldr	r4, [pc, #48]	; (80030a4 <__libc_init_array+0x44>)
 8003074:	f000 f820 	bl	80030b8 <_init>
 8003078:	1ba4      	subs	r4, r4, r6
 800307a:	10a4      	asrs	r4, r4, #2
 800307c:	2500      	movs	r5, #0
 800307e:	42a5      	cmp	r5, r4
 8003080:	d105      	bne.n	800308e <__libc_init_array+0x2e>
 8003082:	bd70      	pop	{r4, r5, r6, pc}
 8003084:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003088:	4798      	blx	r3
 800308a:	3501      	adds	r5, #1
 800308c:	e7ee      	b.n	800306c <__libc_init_array+0xc>
 800308e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003092:	4798      	blx	r3
 8003094:	3501      	adds	r5, #1
 8003096:	e7f2      	b.n	800307e <__libc_init_array+0x1e>
 8003098:	08003194 	.word	0x08003194
 800309c:	08003194 	.word	0x08003194
 80030a0:	08003194 	.word	0x08003194
 80030a4:	08003198 	.word	0x08003198

080030a8 <memset>:
 80030a8:	4402      	add	r2, r0
 80030aa:	4603      	mov	r3, r0
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d100      	bne.n	80030b2 <memset+0xa>
 80030b0:	4770      	bx	lr
 80030b2:	f803 1b01 	strb.w	r1, [r3], #1
 80030b6:	e7f9      	b.n	80030ac <memset+0x4>

080030b8 <_init>:
 80030b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030ba:	bf00      	nop
 80030bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030be:	bc08      	pop	{r3}
 80030c0:	469e      	mov	lr, r3
 80030c2:	4770      	bx	lr

080030c4 <_fini>:
 80030c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030c6:	bf00      	nop
 80030c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030ca:	bc08      	pop	{r3}
 80030cc:	469e      	mov	lr, r3
 80030ce:	4770      	bx	lr
